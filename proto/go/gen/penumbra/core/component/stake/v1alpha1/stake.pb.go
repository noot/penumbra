// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: penumbra/core/component/stake/v1alpha1/stake.proto

package stakev1alpha1

import (
	v1alpha12 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/asset/v1alpha1"
	v1alpha1 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/keys/v1alpha1"
	v1alpha11 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/num/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BondingState_BondingStateEnum int32

const (
	BondingState_BONDING_STATE_ENUM_UNSPECIFIED BondingState_BondingStateEnum = 0
	BondingState_BONDING_STATE_ENUM_BONDED      BondingState_BondingStateEnum = 1
	BondingState_BONDING_STATE_ENUM_UNBONDING   BondingState_BondingStateEnum = 2
	BondingState_BONDING_STATE_ENUM_UNBONDED    BondingState_BondingStateEnum = 3
)

// Enum value maps for BondingState_BondingStateEnum.
var (
	BondingState_BondingStateEnum_name = map[int32]string{
		0: "BONDING_STATE_ENUM_UNSPECIFIED",
		1: "BONDING_STATE_ENUM_BONDED",
		2: "BONDING_STATE_ENUM_UNBONDING",
		3: "BONDING_STATE_ENUM_UNBONDED",
	}
	BondingState_BondingStateEnum_value = map[string]int32{
		"BONDING_STATE_ENUM_UNSPECIFIED": 0,
		"BONDING_STATE_ENUM_BONDED":      1,
		"BONDING_STATE_ENUM_UNBONDING":   2,
		"BONDING_STATE_ENUM_UNBONDED":    3,
	}
)

func (x BondingState_BondingStateEnum) Enum() *BondingState_BondingStateEnum {
	p := new(BondingState_BondingStateEnum)
	*p = x
	return p
}

func (x BondingState_BondingStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondingState_BondingStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_enumTypes[0].Descriptor()
}

func (BondingState_BondingStateEnum) Type() protoreflect.EnumType {
	return &file_penumbra_core_component_stake_v1alpha1_stake_proto_enumTypes[0]
}

func (x BondingState_BondingStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondingState_BondingStateEnum.Descriptor instead.
func (BondingState_BondingStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{7, 0}
}

type ValidatorState_ValidatorStateEnum int32

const (
	ValidatorState_VALIDATOR_STATE_ENUM_UNSPECIFIED ValidatorState_ValidatorStateEnum = 0
	ValidatorState_VALIDATOR_STATE_ENUM_INACTIVE    ValidatorState_ValidatorStateEnum = 1
	ValidatorState_VALIDATOR_STATE_ENUM_ACTIVE      ValidatorState_ValidatorStateEnum = 2
	ValidatorState_VALIDATOR_STATE_ENUM_JAILED      ValidatorState_ValidatorStateEnum = 3
	ValidatorState_VALIDATOR_STATE_ENUM_TOMBSTONED  ValidatorState_ValidatorStateEnum = 4
	ValidatorState_VALIDATOR_STATE_ENUM_DISABLED    ValidatorState_ValidatorStateEnum = 5
)

// Enum value maps for ValidatorState_ValidatorStateEnum.
var (
	ValidatorState_ValidatorStateEnum_name = map[int32]string{
		0: "VALIDATOR_STATE_ENUM_UNSPECIFIED",
		1: "VALIDATOR_STATE_ENUM_INACTIVE",
		2: "VALIDATOR_STATE_ENUM_ACTIVE",
		3: "VALIDATOR_STATE_ENUM_JAILED",
		4: "VALIDATOR_STATE_ENUM_TOMBSTONED",
		5: "VALIDATOR_STATE_ENUM_DISABLED",
	}
	ValidatorState_ValidatorStateEnum_value = map[string]int32{
		"VALIDATOR_STATE_ENUM_UNSPECIFIED": 0,
		"VALIDATOR_STATE_ENUM_INACTIVE":    1,
		"VALIDATOR_STATE_ENUM_ACTIVE":      2,
		"VALIDATOR_STATE_ENUM_JAILED":      3,
		"VALIDATOR_STATE_ENUM_TOMBSTONED":  4,
		"VALIDATOR_STATE_ENUM_DISABLED":    5,
	}
)

func (x ValidatorState_ValidatorStateEnum) Enum() *ValidatorState_ValidatorStateEnum {
	p := new(ValidatorState_ValidatorStateEnum)
	*p = x
	return p
}

func (x ValidatorState_ValidatorStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValidatorState_ValidatorStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_enumTypes[1].Descriptor()
}

func (ValidatorState_ValidatorStateEnum) Type() protoreflect.EnumType {
	return &file_penumbra_core_component_stake_v1alpha1_stake_proto_enumTypes[1]
}

func (x ValidatorState_ValidatorStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValidatorState_ValidatorStateEnum.Descriptor instead.
func (ValidatorState_ValidatorStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{8, 0}
}

// A Penumbra ZK undelegate claim proof.
type ZKUndelegateClaimProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKUndelegateClaimProof) Reset() {
	*x = ZKUndelegateClaimProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKUndelegateClaimProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKUndelegateClaimProof) ProtoMessage() {}

func (x *ZKUndelegateClaimProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKUndelegateClaimProof.ProtoReflect.Descriptor instead.
func (*ZKUndelegateClaimProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{0}
}

func (x *ZKUndelegateClaimProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// Describes a validator's configuration data.
type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The validator's identity verification key.
	IdentityKey *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	// The validator's consensus pubkey for use in Tendermint (Ed25519).
	ConsensusKey []byte `protobuf:"bytes,2,opt,name=consensus_key,json=consensusKey,proto3" json:"consensus_key,omitempty"`
	// The validator's (human-readable) name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The validator's website.
	Website string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	// The validator's description.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Whether the validator is enabled or not.
	//
	// Disabled validators cannot be delegated to, and immediately begin unbonding.
	Enabled bool `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// A list of funding streams describing the validator's commission.
	FundingStreams []*FundingStream `protobuf:"bytes,6,rep,name=funding_streams,json=fundingStreams,proto3" json:"funding_streams,omitempty"`
	// The sequence number determines which validator data takes priority, and
	// prevents replay attacks.  The chain only accepts new validator definitions
	// with increasing sequence numbers.
	SequenceNumber uint32 `protobuf:"varint,7,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// The validator's governance key.
	GovernanceKey *v1alpha1.GovernanceKey `protobuf:"bytes,9,opt,name=governance_key,json=governanceKey,proto3" json:"governance_key,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{1}
}

func (x *Validator) GetIdentityKey() *v1alpha1.IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *Validator) GetConsensusKey() []byte {
	if x != nil {
		return x.ConsensusKey
	}
	return nil
}

func (x *Validator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Validator) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Validator) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Validator) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Validator) GetFundingStreams() []*FundingStream {
	if x != nil {
		return x.FundingStreams
	}
	return nil
}

func (x *Validator) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Validator) GetGovernanceKey() *v1alpha1.GovernanceKey {
	if x != nil {
		return x.GovernanceKey
	}
	return nil
}

// For storing the list of keys of known validators.
type ValidatorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorKeys []*v1alpha1.IdentityKey `protobuf:"bytes,1,rep,name=validator_keys,json=validatorKeys,proto3" json:"validator_keys,omitempty"`
}

func (x *ValidatorList) Reset() {
	*x = ValidatorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorList) ProtoMessage() {}

func (x *ValidatorList) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorList.ProtoReflect.Descriptor instead.
func (*ValidatorList) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{2}
}

func (x *ValidatorList) GetValidatorKeys() []*v1alpha1.IdentityKey {
	if x != nil {
		return x.ValidatorKeys
	}
	return nil
}

// A portion of a validator's commission.
type FundingStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The recipient of the funding stream.
	//
	// Types that are assignable to Recipient:
	//
	//	*FundingStream_ToAddress_
	//	*FundingStream_ToCommunityPool_
	Recipient isFundingStream_Recipient `protobuf_oneof:"recipient"`
}

func (x *FundingStream) Reset() {
	*x = FundingStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingStream) ProtoMessage() {}

func (x *FundingStream) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingStream.ProtoReflect.Descriptor instead.
func (*FundingStream) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{3}
}

func (m *FundingStream) GetRecipient() isFundingStream_Recipient {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (x *FundingStream) GetToAddress() *FundingStream_ToAddress {
	if x, ok := x.GetRecipient().(*FundingStream_ToAddress_); ok {
		return x.ToAddress
	}
	return nil
}

func (x *FundingStream) GetToCommunityPool() *FundingStream_ToCommunityPool {
	if x, ok := x.GetRecipient().(*FundingStream_ToCommunityPool_); ok {
		return x.ToCommunityPool
	}
	return nil
}

type isFundingStream_Recipient interface {
	isFundingStream_Recipient()
}

type FundingStream_ToAddress_ struct {
	ToAddress *FundingStream_ToAddress `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3,oneof"`
}

type FundingStream_ToCommunityPool_ struct {
	ToCommunityPool *FundingStream_ToCommunityPool `protobuf:"bytes,2,opt,name=to_community_pool,json=toCommunityPool,proto3,oneof"`
}

func (*FundingStream_ToAddress_) isFundingStream_Recipient() {}

func (*FundingStream_ToCommunityPool_) isFundingStream_Recipient() {}

// Describes the reward and exchange rates and voting power for a validator in some epoch.
type RateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey           *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	EpochIndex            uint64                `protobuf:"varint,2,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	ValidatorRewardRate   uint64                `protobuf:"varint,4,opt,name=validator_reward_rate,json=validatorRewardRate,proto3" json:"validator_reward_rate,omitempty"`
	ValidatorExchangeRate uint64                `protobuf:"varint,5,opt,name=validator_exchange_rate,json=validatorExchangeRate,proto3" json:"validator_exchange_rate,omitempty"`
}

func (x *RateData) Reset() {
	*x = RateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateData) ProtoMessage() {}

func (x *RateData) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateData.ProtoReflect.Descriptor instead.
func (*RateData) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{4}
}

func (x *RateData) GetIdentityKey() *v1alpha1.IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *RateData) GetEpochIndex() uint64 {
	if x != nil {
		return x.EpochIndex
	}
	return 0
}

func (x *RateData) GetValidatorRewardRate() uint64 {
	if x != nil {
		return x.ValidatorRewardRate
	}
	return 0
}

func (x *RateData) GetValidatorExchangeRate() uint64 {
	if x != nil {
		return x.ValidatorExchangeRate
	}
	return 0
}

// Describes the base reward and exchange rates in some epoch.
type BaseRateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochIndex       uint64 `protobuf:"varint,1,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	BaseRewardRate   uint64 `protobuf:"varint,2,opt,name=base_reward_rate,json=baseRewardRate,proto3" json:"base_reward_rate,omitempty"`
	BaseExchangeRate uint64 `protobuf:"varint,3,opt,name=base_exchange_rate,json=baseExchangeRate,proto3" json:"base_exchange_rate,omitempty"`
}

func (x *BaseRateData) Reset() {
	*x = BaseRateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRateData) ProtoMessage() {}

func (x *BaseRateData) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRateData.ProtoReflect.Descriptor instead.
func (*BaseRateData) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{5}
}

func (x *BaseRateData) GetEpochIndex() uint64 {
	if x != nil {
		return x.EpochIndex
	}
	return 0
}

func (x *BaseRateData) GetBaseRewardRate() uint64 {
	if x != nil {
		return x.BaseRewardRate
	}
	return 0
}

func (x *BaseRateData) GetBaseExchangeRate() uint64 {
	if x != nil {
		return x.BaseExchangeRate
	}
	return 0
}

// Describes the current state of a validator on-chain
type ValidatorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey  *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	State        *ValidatorState       `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	VotingPower  uint64                `protobuf:"varint,3,opt,name=voting_power,json=votingPower,proto3" json:"voting_power,omitempty"`
	BondingState *BondingState         `protobuf:"bytes,4,opt,name=bonding_state,json=bondingState,proto3" json:"bonding_state,omitempty"`
}

func (x *ValidatorStatus) Reset() {
	*x = ValidatorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorStatus) ProtoMessage() {}

func (x *ValidatorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorStatus.ProtoReflect.Descriptor instead.
func (*ValidatorStatus) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{6}
}

func (x *ValidatorStatus) GetIdentityKey() *v1alpha1.IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *ValidatorStatus) GetState() *ValidatorState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ValidatorStatus) GetVotingPower() uint64 {
	if x != nil {
		return x.VotingPower
	}
	return 0
}

func (x *ValidatorStatus) GetBondingState() *BondingState {
	if x != nil {
		return x.BondingState
	}
	return nil
}

// Describes the unbonding state of a validator's stake pool.
type BondingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State          BondingState_BondingStateEnum `protobuf:"varint,1,opt,name=state,proto3,enum=penumbra.core.component.stake.v1alpha1.BondingState_BondingStateEnum" json:"state,omitempty"`
	UnbondingEpoch uint64                        `protobuf:"varint,2,opt,name=unbonding_epoch,json=unbondingEpoch,proto3" json:"unbonding_epoch,omitempty"`
}

func (x *BondingState) Reset() {
	*x = BondingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BondingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BondingState) ProtoMessage() {}

func (x *BondingState) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BondingState.ProtoReflect.Descriptor instead.
func (*BondingState) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{7}
}

func (x *BondingState) GetState() BondingState_BondingStateEnum {
	if x != nil {
		return x.State
	}
	return BondingState_BONDING_STATE_ENUM_UNSPECIFIED
}

func (x *BondingState) GetUnbondingEpoch() uint64 {
	if x != nil {
		return x.UnbondingEpoch
	}
	return 0
}

// Describes the state of a validator
type ValidatorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State ValidatorState_ValidatorStateEnum `protobuf:"varint,1,opt,name=state,proto3,enum=penumbra.core.component.stake.v1alpha1.ValidatorState_ValidatorStateEnum" json:"state,omitempty"`
}

func (x *ValidatorState) Reset() {
	*x = ValidatorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorState) ProtoMessage() {}

func (x *ValidatorState) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorState.ProtoReflect.Descriptor instead.
func (*ValidatorState) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{8}
}

func (x *ValidatorState) GetState() ValidatorState_ValidatorStateEnum {
	if x != nil {
		return x.State
	}
	return ValidatorState_VALIDATOR_STATE_ENUM_UNSPECIFIED
}

// Combines all validator info into a single packet.
type ValidatorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validator *Validator       `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Status    *ValidatorStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	RateData  *RateData        `protobuf:"bytes,3,opt,name=rate_data,json=rateData,proto3" json:"rate_data,omitempty"`
}

func (x *ValidatorInfo) Reset() {
	*x = ValidatorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorInfo) ProtoMessage() {}

func (x *ValidatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorInfo.ProtoReflect.Descriptor instead.
func (*ValidatorInfo) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{9}
}

func (x *ValidatorInfo) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *ValidatorInfo) GetStatus() *ValidatorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ValidatorInfo) GetRateData() *RateData {
	if x != nil {
		return x.RateData
	}
	return nil
}

// A transaction action (re)defining a validator.
type ValidatorDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration data for the validator.
	Validator *Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// A signature by the validator's identity key over the validator data.
	AuthSig []byte `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
}

func (x *ValidatorDefinition) Reset() {
	*x = ValidatorDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorDefinition) ProtoMessage() {}

func (x *ValidatorDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorDefinition.ProtoReflect.Descriptor instead.
func (*ValidatorDefinition) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{10}
}

func (x *ValidatorDefinition) GetValidator() *Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *ValidatorDefinition) GetAuthSig() []byte {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

// A transaction action adding stake to a validator's delegation pool.
type Delegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity key of the validator to delegate to.
	ValidatorIdentity *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=validator_identity,json=validatorIdentity,proto3" json:"validator_identity,omitempty"`
	// The index of the epoch in which this delegation was performed.
	// The delegation takes effect in the next epoch.
	EpochIndex uint64 `protobuf:"varint,2,opt,name=epoch_index,json=epochIndex,proto3" json:"epoch_index,omitempty"`
	// The delegation amount, in units of unbonded stake.
	// TODO: use flow aggregation to hide this, replacing it with bytes amount_ciphertext;
	UnbondedAmount *v1alpha11.Amount `protobuf:"bytes,3,opt,name=unbonded_amount,json=unbondedAmount,proto3" json:"unbonded_amount,omitempty"`
	// The amount of delegation tokens produced by this action.
	//
	// This is implied by the validator's exchange rate in the specified epoch
	// (and should be checked in transaction validation!), but including it allows
	// stateless verification that the transaction is internally consistent.
	DelegationAmount *v1alpha11.Amount `protobuf:"bytes,4,opt,name=delegation_amount,json=delegationAmount,proto3" json:"delegation_amount,omitempty"`
}

func (x *Delegate) Reset() {
	*x = Delegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegate) ProtoMessage() {}

func (x *Delegate) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegate.ProtoReflect.Descriptor instead.
func (*Delegate) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{11}
}

func (x *Delegate) GetValidatorIdentity() *v1alpha1.IdentityKey {
	if x != nil {
		return x.ValidatorIdentity
	}
	return nil
}

func (x *Delegate) GetEpochIndex() uint64 {
	if x != nil {
		return x.EpochIndex
	}
	return 0
}

func (x *Delegate) GetUnbondedAmount() *v1alpha11.Amount {
	if x != nil {
		return x.UnbondedAmount
	}
	return nil
}

func (x *Delegate) GetDelegationAmount() *v1alpha11.Amount {
	if x != nil {
		return x.DelegationAmount
	}
	return nil
}

// A transaction action withdrawing stake from a validator's delegation pool.
type Undelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity key of the validator to undelegate from.
	ValidatorIdentity *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=validator_identity,json=validatorIdentity,proto3" json:"validator_identity,omitempty"`
	// The index of the epoch in which this undelegation was performed.
	StartEpochIndex uint64 `protobuf:"varint,2,opt,name=start_epoch_index,json=startEpochIndex,proto3" json:"start_epoch_index,omitempty"`
	// The amount to undelegate, in units of unbonding tokens.
	UnbondedAmount *v1alpha11.Amount `protobuf:"bytes,3,opt,name=unbonded_amount,json=unbondedAmount,proto3" json:"unbonded_amount,omitempty"`
	// The amount of delegation tokens consumed by this action.
	//
	// This is implied by the validator's exchange rate in the specified epoch
	// (and should be checked in transaction validation!), but including it allows
	// stateless verification that the transaction is internally consistent.
	DelegationAmount *v1alpha11.Amount `protobuf:"bytes,4,opt,name=delegation_amount,json=delegationAmount,proto3" json:"delegation_amount,omitempty"`
}

func (x *Undelegate) Reset() {
	*x = Undelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Undelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Undelegate) ProtoMessage() {}

func (x *Undelegate) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Undelegate.ProtoReflect.Descriptor instead.
func (*Undelegate) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{12}
}

func (x *Undelegate) GetValidatorIdentity() *v1alpha1.IdentityKey {
	if x != nil {
		return x.ValidatorIdentity
	}
	return nil
}

func (x *Undelegate) GetStartEpochIndex() uint64 {
	if x != nil {
		return x.StartEpochIndex
	}
	return 0
}

func (x *Undelegate) GetUnbondedAmount() *v1alpha11.Amount {
	if x != nil {
		return x.UnbondedAmount
	}
	return nil
}

func (x *Undelegate) GetDelegationAmount() *v1alpha11.Amount {
	if x != nil {
		return x.DelegationAmount
	}
	return nil
}

// A transaction action finishing an undelegation, converting (slashable)
// "unbonding tokens" to (unslashable) staking tokens.
type UndelegateClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body  *UndelegateClaimBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Proof []byte               `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *UndelegateClaim) Reset() {
	*x = UndelegateClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateClaim) ProtoMessage() {}

func (x *UndelegateClaim) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndelegateClaim.ProtoReflect.Descriptor instead.
func (*UndelegateClaim) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{13}
}

func (x *UndelegateClaim) GetBody() *UndelegateClaimBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *UndelegateClaim) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

type UndelegateClaimBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity key of the validator to finish undelegating from.
	ValidatorIdentity *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=validator_identity,json=validatorIdentity,proto3" json:"validator_identity,omitempty"`
	// The epoch in which unbonding began, used to verify the penalty.
	StartEpochIndex uint64 `protobuf:"varint,2,opt,name=start_epoch_index,json=startEpochIndex,proto3" json:"start_epoch_index,omitempty"`
	// The penalty applied to undelegation, in bps^2 (10e-8).
	// In the happy path (no slashing), this is 0.
	Penalty *Penalty `protobuf:"bytes,3,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// The action's contribution to the transaction's value balance.
	BalanceCommitment *v1alpha12.BalanceCommitment `protobuf:"bytes,4,opt,name=balance_commitment,json=balanceCommitment,proto3" json:"balance_commitment,omitempty"`
}

func (x *UndelegateClaimBody) Reset() {
	*x = UndelegateClaimBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateClaimBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateClaimBody) ProtoMessage() {}

func (x *UndelegateClaimBody) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndelegateClaimBody.ProtoReflect.Descriptor instead.
func (*UndelegateClaimBody) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{14}
}

func (x *UndelegateClaimBody) GetValidatorIdentity() *v1alpha1.IdentityKey {
	if x != nil {
		return x.ValidatorIdentity
	}
	return nil
}

func (x *UndelegateClaimBody) GetStartEpochIndex() uint64 {
	if x != nil {
		return x.StartEpochIndex
	}
	return 0
}

func (x *UndelegateClaimBody) GetPenalty() *Penalty {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *UndelegateClaimBody) GetBalanceCommitment() *v1alpha12.BalanceCommitment {
	if x != nil {
		return x.BalanceCommitment
	}
	return nil
}

type UndelegateClaimPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity key of the validator to finish undelegating from.
	ValidatorIdentity *v1alpha1.IdentityKey `protobuf:"bytes,1,opt,name=validator_identity,json=validatorIdentity,proto3" json:"validator_identity,omitempty"`
	// The epoch in which unbonding began, used to verify the penalty.
	StartEpochIndex uint64 `protobuf:"varint,2,opt,name=start_epoch_index,json=startEpochIndex,proto3" json:"start_epoch_index,omitempty"`
	// The penalty applied to undelegation, in bps^2 (10e-8).
	// In the happy path (no slashing), this is 0.
	Penalty *Penalty `protobuf:"bytes,4,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// The amount of unbonding tokens to claim.
	// This is a bare number because its denom is determined by the preceding data.
	UnbondingAmount *v1alpha11.Amount `protobuf:"bytes,5,opt,name=unbonding_amount,json=unbondingAmount,proto3" json:"unbonding_amount,omitempty"`
	// The blinding factor to use for the balance commitment.
	BalanceBlinding []byte `protobuf:"bytes,6,opt,name=balance_blinding,json=balanceBlinding,proto3" json:"balance_blinding,omitempty"`
	// The first blinding factor to use for the ZK undelegate claim proof.
	ProofBlindingR []byte `protobuf:"bytes,7,opt,name=proof_blinding_r,json=proofBlindingR,proto3" json:"proof_blinding_r,omitempty"`
	// The second blinding factor to use for the ZK undelegate claim proof.
	ProofBlindingS []byte `protobuf:"bytes,8,opt,name=proof_blinding_s,json=proofBlindingS,proto3" json:"proof_blinding_s,omitempty"`
}

func (x *UndelegateClaimPlan) Reset() {
	*x = UndelegateClaimPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndelegateClaimPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndelegateClaimPlan) ProtoMessage() {}

func (x *UndelegateClaimPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndelegateClaimPlan.ProtoReflect.Descriptor instead.
func (*UndelegateClaimPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{15}
}

func (x *UndelegateClaimPlan) GetValidatorIdentity() *v1alpha1.IdentityKey {
	if x != nil {
		return x.ValidatorIdentity
	}
	return nil
}

func (x *UndelegateClaimPlan) GetStartEpochIndex() uint64 {
	if x != nil {
		return x.StartEpochIndex
	}
	return 0
}

func (x *UndelegateClaimPlan) GetPenalty() *Penalty {
	if x != nil {
		return x.Penalty
	}
	return nil
}

func (x *UndelegateClaimPlan) GetUnbondingAmount() *v1alpha11.Amount {
	if x != nil {
		return x.UnbondingAmount
	}
	return nil
}

func (x *UndelegateClaimPlan) GetBalanceBlinding() []byte {
	if x != nil {
		return x.BalanceBlinding
	}
	return nil
}

func (x *UndelegateClaimPlan) GetProofBlindingR() []byte {
	if x != nil {
		return x.ProofBlindingR
	}
	return nil
}

func (x *UndelegateClaimPlan) GetProofBlindingS() []byte {
	if x != nil {
		return x.ProofBlindingS
	}
	return nil
}

// A list of pending delegations and undelegations.
type DelegationChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delegations   []*Delegate   `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
	Undelegations []*Undelegate `protobuf:"bytes,2,rep,name=undelegations,proto3" json:"undelegations,omitempty"`
}

func (x *DelegationChanges) Reset() {
	*x = DelegationChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationChanges) ProtoMessage() {}

func (x *DelegationChanges) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationChanges.ProtoReflect.Descriptor instead.
func (*DelegationChanges) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{16}
}

func (x *DelegationChanges) GetDelegations() []*Delegate {
	if x != nil {
		return x.Delegations
	}
	return nil
}

func (x *DelegationChanges) GetUndelegations() []*Undelegate {
	if x != nil {
		return x.Undelegations
	}
	return nil
}

// Track's a validator's uptime.
type Uptime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsOfBlockHeight uint64 `protobuf:"varint,1,opt,name=as_of_block_height,json=asOfBlockHeight,proto3" json:"as_of_block_height,omitempty"`
	WindowLen       uint32 `protobuf:"varint,2,opt,name=window_len,json=windowLen,proto3" json:"window_len,omitempty"`
	Bitvec          []byte `protobuf:"bytes,3,opt,name=bitvec,proto3" json:"bitvec,omitempty"`
}

func (x *Uptime) Reset() {
	*x = Uptime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uptime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uptime) ProtoMessage() {}

func (x *Uptime) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uptime.ProtoReflect.Descriptor instead.
func (*Uptime) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{17}
}

func (x *Uptime) GetAsOfBlockHeight() uint64 {
	if x != nil {
		return x.AsOfBlockHeight
	}
	return 0
}

func (x *Uptime) GetWindowLen() uint32 {
	if x != nil {
		return x.WindowLen
	}
	return 0
}

func (x *Uptime) GetBitvec() []byte {
	if x != nil {
		return x.Bitvec
	}
	return nil
}

// Tracks our view of Tendermint's view of the validator set, so we can keep it
// from getting confused.
type CurrentConsensusKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusKeys []*v1alpha1.ConsensusKey `protobuf:"bytes,1,rep,name=consensus_keys,json=consensusKeys,proto3" json:"consensus_keys,omitempty"`
}

func (x *CurrentConsensusKeys) Reset() {
	*x = CurrentConsensusKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentConsensusKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentConsensusKeys) ProtoMessage() {}

func (x *CurrentConsensusKeys) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentConsensusKeys.ProtoReflect.Descriptor instead.
func (*CurrentConsensusKeys) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{18}
}

func (x *CurrentConsensusKeys) GetConsensusKeys() []*v1alpha1.ConsensusKey {
	if x != nil {
		return x.ConsensusKeys
	}
	return nil
}

// Tracks slashing penalties applied to a validator in some epoch.
type Penalty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Penalty) Reset() {
	*x = Penalty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Penalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Penalty) ProtoMessage() {}

func (x *Penalty) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Penalty.ProtoReflect.Descriptor instead.
func (*Penalty) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{19}
}

func (x *Penalty) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// Requests information on the chain's validators.
type ValidatorInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Whether or not to return inactive validators
	ShowInactive bool `protobuf:"varint,2,opt,name=show_inactive,json=showInactive,proto3" json:"show_inactive,omitempty"`
}

func (x *ValidatorInfoRequest) Reset() {
	*x = ValidatorInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorInfoRequest) ProtoMessage() {}

func (x *ValidatorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorInfoRequest.ProtoReflect.Descriptor instead.
func (*ValidatorInfoRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{20}
}

func (x *ValidatorInfoRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ValidatorInfoRequest) GetShowInactive() bool {
	if x != nil {
		return x.ShowInactive
	}
	return false
}

type ValidatorInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorInfo *ValidatorInfo `protobuf:"bytes,1,opt,name=validator_info,json=validatorInfo,proto3" json:"validator_info,omitempty"`
}

func (x *ValidatorInfoResponse) Reset() {
	*x = ValidatorInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorInfoResponse) ProtoMessage() {}

func (x *ValidatorInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorInfoResponse.ProtoReflect.Descriptor instead.
func (*ValidatorInfoResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{21}
}

func (x *ValidatorInfoResponse) GetValidatorInfo() *ValidatorInfo {
	if x != nil {
		return x.ValidatorInfo
	}
	return nil
}

type ValidatorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId     string                `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey *v1alpha1.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (x *ValidatorStatusRequest) Reset() {
	*x = ValidatorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorStatusRequest) ProtoMessage() {}

func (x *ValidatorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorStatusRequest.ProtoReflect.Descriptor instead.
func (*ValidatorStatusRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{22}
}

func (x *ValidatorStatusRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ValidatorStatusRequest) GetIdentityKey() *v1alpha1.IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

type ValidatorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ValidatorStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ValidatorStatusResponse) Reset() {
	*x = ValidatorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorStatusResponse) ProtoMessage() {}

func (x *ValidatorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorStatusResponse.ProtoReflect.Descriptor instead.
func (*ValidatorStatusResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{23}
}

func (x *ValidatorStatusResponse) GetStatus() *ValidatorStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Requests the compounded penalty for a validator over a range of epochs.
type ValidatorPenaltyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId         string                `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey     *v1alpha1.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	StartEpochIndex uint64                `protobuf:"varint,3,opt,name=start_epoch_index,json=startEpochIndex,proto3" json:"start_epoch_index,omitempty"`
	EndEpochIndex   uint64                `protobuf:"varint,4,opt,name=end_epoch_index,json=endEpochIndex,proto3" json:"end_epoch_index,omitempty"`
}

func (x *ValidatorPenaltyRequest) Reset() {
	*x = ValidatorPenaltyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorPenaltyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorPenaltyRequest) ProtoMessage() {}

func (x *ValidatorPenaltyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorPenaltyRequest.ProtoReflect.Descriptor instead.
func (*ValidatorPenaltyRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{24}
}

func (x *ValidatorPenaltyRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ValidatorPenaltyRequest) GetIdentityKey() *v1alpha1.IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *ValidatorPenaltyRequest) GetStartEpochIndex() uint64 {
	if x != nil {
		return x.StartEpochIndex
	}
	return 0
}

func (x *ValidatorPenaltyRequest) GetEndEpochIndex() uint64 {
	if x != nil {
		return x.EndEpochIndex
	}
	return 0
}

type ValidatorPenaltyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Penalty *Penalty `protobuf:"bytes,1,opt,name=penalty,proto3" json:"penalty,omitempty"`
}

func (x *ValidatorPenaltyResponse) Reset() {
	*x = ValidatorPenaltyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorPenaltyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorPenaltyResponse) ProtoMessage() {}

func (x *ValidatorPenaltyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorPenaltyResponse.ProtoReflect.Descriptor instead.
func (*ValidatorPenaltyResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{25}
}

func (x *ValidatorPenaltyResponse) GetPenalty() *Penalty {
	if x != nil {
		return x.Penalty
	}
	return nil
}

type CurrentValidatorRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId     string                `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	IdentityKey *v1alpha1.IdentityKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (x *CurrentValidatorRateRequest) Reset() {
	*x = CurrentValidatorRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentValidatorRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentValidatorRateRequest) ProtoMessage() {}

func (x *CurrentValidatorRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentValidatorRateRequest.ProtoReflect.Descriptor instead.
func (*CurrentValidatorRateRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{26}
}

func (x *CurrentValidatorRateRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *CurrentValidatorRateRequest) GetIdentityKey() *v1alpha1.IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

type CurrentValidatorRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RateData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CurrentValidatorRateResponse) Reset() {
	*x = CurrentValidatorRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentValidatorRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentValidatorRateResponse) ProtoMessage() {}

func (x *CurrentValidatorRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentValidatorRateResponse.ProtoReflect.Descriptor instead.
func (*CurrentValidatorRateResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{27}
}

func (x *CurrentValidatorRateResponse) GetData() *RateData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Staking configuration data.
type StakeParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of epochs an unbonding note for before being released.
	UnbondingEpochs uint64 `protobuf:"varint,1,opt,name=unbonding_epochs,json=unbondingEpochs,proto3" json:"unbonding_epochs,omitempty"`
	// The maximum number of validators in the consensus set.
	ActiveValidatorLimit uint64 `protobuf:"varint,2,opt,name=active_validator_limit,json=activeValidatorLimit,proto3" json:"active_validator_limit,omitempty"`
	// The base reward rate, expressed in basis points of basis points
	BaseRewardRate uint64 `protobuf:"varint,3,opt,name=base_reward_rate,json=baseRewardRate,proto3" json:"base_reward_rate,omitempty"`
	// The penalty for slashing due to misbehavior.
	SlashingPenaltyMisbehavior uint64 `protobuf:"varint,4,opt,name=slashing_penalty_misbehavior,json=slashingPenaltyMisbehavior,proto3" json:"slashing_penalty_misbehavior,omitempty"`
	// The penalty for slashing due to downtime.
	SlashingPenaltyDowntime uint64 `protobuf:"varint,5,opt,name=slashing_penalty_downtime,json=slashingPenaltyDowntime,proto3" json:"slashing_penalty_downtime,omitempty"`
	// The number of blocks in the window to check for downtime.
	SignedBlocksWindowLen uint64 `protobuf:"varint,6,opt,name=signed_blocks_window_len,json=signedBlocksWindowLen,proto3" json:"signed_blocks_window_len,omitempty"`
	// The maximum number of blocks in the window each validator can miss signing without slashing.
	MissedBlocksMaximum uint64 `protobuf:"varint,7,opt,name=missed_blocks_maximum,json=missedBlocksMaximum,proto3" json:"missed_blocks_maximum,omitempty"`
}

func (x *StakeParameters) Reset() {
	*x = StakeParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeParameters) ProtoMessage() {}

func (x *StakeParameters) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeParameters.ProtoReflect.Descriptor instead.
func (*StakeParameters) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{28}
}

func (x *StakeParameters) GetUnbondingEpochs() uint64 {
	if x != nil {
		return x.UnbondingEpochs
	}
	return 0
}

func (x *StakeParameters) GetActiveValidatorLimit() uint64 {
	if x != nil {
		return x.ActiveValidatorLimit
	}
	return 0
}

func (x *StakeParameters) GetBaseRewardRate() uint64 {
	if x != nil {
		return x.BaseRewardRate
	}
	return 0
}

func (x *StakeParameters) GetSlashingPenaltyMisbehavior() uint64 {
	if x != nil {
		return x.SlashingPenaltyMisbehavior
	}
	return 0
}

func (x *StakeParameters) GetSlashingPenaltyDowntime() uint64 {
	if x != nil {
		return x.SlashingPenaltyDowntime
	}
	return 0
}

func (x *StakeParameters) GetSignedBlocksWindowLen() uint64 {
	if x != nil {
		return x.SignedBlocksWindowLen
	}
	return 0
}

func (x *StakeParameters) GetMissedBlocksMaximum() uint64 {
	if x != nil {
		return x.MissedBlocksMaximum
	}
	return 0
}

// Genesis data for the staking component.
type GenesisContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configuration parameters for the staking component present at genesis
	StakeParams *StakeParameters `protobuf:"bytes,1,opt,name=stake_params,json=stakeParams,proto3" json:"stake_params,omitempty"`
	// The list of validators present at genesis.
	Validators []*Validator `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *GenesisContent) Reset() {
	*x = GenesisContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisContent) ProtoMessage() {}

func (x *GenesisContent) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisContent.ProtoReflect.Descriptor instead.
func (*GenesisContent) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{29}
}

func (x *GenesisContent) GetStakeParams() *StakeParameters {
	if x != nil {
		return x.StakeParams
	}
	return nil
}

func (x *GenesisContent) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type FundingStream_ToAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination address for the funding stream.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The portion of the staking reward for the entire delegation pool
	// allocated to this funding stream, specified in basis points.
	RateBps uint32 `protobuf:"varint,2,opt,name=rate_bps,json=rateBps,proto3" json:"rate_bps,omitempty"`
}

func (x *FundingStream_ToAddress) Reset() {
	*x = FundingStream_ToAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingStream_ToAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingStream_ToAddress) ProtoMessage() {}

func (x *FundingStream_ToAddress) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingStream_ToAddress.ProtoReflect.Descriptor instead.
func (*FundingStream_ToAddress) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FundingStream_ToAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FundingStream_ToAddress) GetRateBps() uint32 {
	if x != nil {
		return x.RateBps
	}
	return 0
}

type FundingStream_ToCommunityPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The portion of the staking reward for the entire delegation pool
	// allocated to this funding stream, specified in basis points.
	RateBps uint32 `protobuf:"varint,2,opt,name=rate_bps,json=rateBps,proto3" json:"rate_bps,omitempty"`
}

func (x *FundingStream_ToCommunityPool) Reset() {
	*x = FundingStream_ToCommunityPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingStream_ToCommunityPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingStream_ToCommunityPool) ProtoMessage() {}

func (x *FundingStream_ToCommunityPool) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundingStream_ToCommunityPool.ProtoReflect.Descriptor instead.
func (*FundingStream_ToCommunityPool) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP(), []int{3, 1}
}

func (x *FundingStream_ToCommunityPool) GetRateBps() uint32 {
	if x != nil {
		return x.RateBps
	}
	return 0
}

var File_penumbra_core_component_stake_v1alpha1_stake_proto protoreflect.FileDescriptor

var file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDesc = []byte{
	0x0a, 0x32, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x28, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6e, 0x75,
	0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x5a, 0x4b, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x22, 0xc3, 0x03, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e,
	0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0e,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x67, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x0d, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xe3, 0x02, 0x0a,
	0x0d, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x60,
	0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x73, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x40, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x70, 0x73, 0x1a, 0x2c, 0x0a, 0x0f, 0x54, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a,
	0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0d, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x5b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x45, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x1e,
	0x42, 0x4f, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x4f, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x4f, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4f, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x22, 0xdb, 0x02, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x24, 0x0a,
	0x20, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f,
	0x4a, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x54, 0x4f, 0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a,
	0x1d, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x22, 0x80, 0x02, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x22, 0xa2, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4b,
	0x0a, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x75, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x02, 0x0a,
	0x0a, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x75,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x78,
	0x0a, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x12, 0x4f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xc5, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x57, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x12, 0x5e, 0x0a, 0x12, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xb3, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a,
	0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52,
	0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x75, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x58, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x06, 0x55, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x61, 0x73, 0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4c, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x74, 0x76, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x69, 0x74, 0x76, 0x65, 0x63, 0x22, 0x68, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x50, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x4b, 0x65, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x22, 0x1f, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x75, 0x0a, 0x15, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x6a, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b,
	0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x65, 0x0a, 0x18, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x22, 0x85, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x64, 0x0a, 0x1c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x87,
	0x03, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e,
	0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1c, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x5f, 0x6d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12,
	0x3a, 0x0a, 0x19, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x17, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x4c, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x32, 0xf0, 0x04, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x0d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x92, 0x01, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x3f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x14, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x43, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xda, 0x02,
	0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0a, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x63, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2d,
	0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x3b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2,
	0x02, 0x04, 0x50, 0x43, 0x43, 0x53, 0xaa, 0x02, 0x26, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca,
	0x02, 0x26, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x32, 0x50, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2a,
	0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescOnce sync.Once
	file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescData = file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDesc
)

func file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescGZIP() []byte {
	file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescOnce.Do(func() {
		file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescData)
	})
	return file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDescData
}

var file_penumbra_core_component_stake_v1alpha1_stake_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_penumbra_core_component_stake_v1alpha1_stake_proto_goTypes = []interface{}{
	(BondingState_BondingStateEnum)(0),     // 0: penumbra.core.component.stake.v1alpha1.BondingState.BondingStateEnum
	(ValidatorState_ValidatorStateEnum)(0), // 1: penumbra.core.component.stake.v1alpha1.ValidatorState.ValidatorStateEnum
	(*ZKUndelegateClaimProof)(nil),         // 2: penumbra.core.component.stake.v1alpha1.ZKUndelegateClaimProof
	(*Validator)(nil),                      // 3: penumbra.core.component.stake.v1alpha1.Validator
	(*ValidatorList)(nil),                  // 4: penumbra.core.component.stake.v1alpha1.ValidatorList
	(*FundingStream)(nil),                  // 5: penumbra.core.component.stake.v1alpha1.FundingStream
	(*RateData)(nil),                       // 6: penumbra.core.component.stake.v1alpha1.RateData
	(*BaseRateData)(nil),                   // 7: penumbra.core.component.stake.v1alpha1.BaseRateData
	(*ValidatorStatus)(nil),                // 8: penumbra.core.component.stake.v1alpha1.ValidatorStatus
	(*BondingState)(nil),                   // 9: penumbra.core.component.stake.v1alpha1.BondingState
	(*ValidatorState)(nil),                 // 10: penumbra.core.component.stake.v1alpha1.ValidatorState
	(*ValidatorInfo)(nil),                  // 11: penumbra.core.component.stake.v1alpha1.ValidatorInfo
	(*ValidatorDefinition)(nil),            // 12: penumbra.core.component.stake.v1alpha1.ValidatorDefinition
	(*Delegate)(nil),                       // 13: penumbra.core.component.stake.v1alpha1.Delegate
	(*Undelegate)(nil),                     // 14: penumbra.core.component.stake.v1alpha1.Undelegate
	(*UndelegateClaim)(nil),                // 15: penumbra.core.component.stake.v1alpha1.UndelegateClaim
	(*UndelegateClaimBody)(nil),            // 16: penumbra.core.component.stake.v1alpha1.UndelegateClaimBody
	(*UndelegateClaimPlan)(nil),            // 17: penumbra.core.component.stake.v1alpha1.UndelegateClaimPlan
	(*DelegationChanges)(nil),              // 18: penumbra.core.component.stake.v1alpha1.DelegationChanges
	(*Uptime)(nil),                         // 19: penumbra.core.component.stake.v1alpha1.Uptime
	(*CurrentConsensusKeys)(nil),           // 20: penumbra.core.component.stake.v1alpha1.CurrentConsensusKeys
	(*Penalty)(nil),                        // 21: penumbra.core.component.stake.v1alpha1.Penalty
	(*ValidatorInfoRequest)(nil),           // 22: penumbra.core.component.stake.v1alpha1.ValidatorInfoRequest
	(*ValidatorInfoResponse)(nil),          // 23: penumbra.core.component.stake.v1alpha1.ValidatorInfoResponse
	(*ValidatorStatusRequest)(nil),         // 24: penumbra.core.component.stake.v1alpha1.ValidatorStatusRequest
	(*ValidatorStatusResponse)(nil),        // 25: penumbra.core.component.stake.v1alpha1.ValidatorStatusResponse
	(*ValidatorPenaltyRequest)(nil),        // 26: penumbra.core.component.stake.v1alpha1.ValidatorPenaltyRequest
	(*ValidatorPenaltyResponse)(nil),       // 27: penumbra.core.component.stake.v1alpha1.ValidatorPenaltyResponse
	(*CurrentValidatorRateRequest)(nil),    // 28: penumbra.core.component.stake.v1alpha1.CurrentValidatorRateRequest
	(*CurrentValidatorRateResponse)(nil),   // 29: penumbra.core.component.stake.v1alpha1.CurrentValidatorRateResponse
	(*StakeParameters)(nil),                // 30: penumbra.core.component.stake.v1alpha1.StakeParameters
	(*GenesisContent)(nil),                 // 31: penumbra.core.component.stake.v1alpha1.GenesisContent
	(*FundingStream_ToAddress)(nil),        // 32: penumbra.core.component.stake.v1alpha1.FundingStream.ToAddress
	(*FundingStream_ToCommunityPool)(nil),  // 33: penumbra.core.component.stake.v1alpha1.FundingStream.ToCommunityPool
	(*v1alpha1.IdentityKey)(nil),           // 34: penumbra.core.keys.v1alpha1.IdentityKey
	(*v1alpha1.GovernanceKey)(nil),         // 35: penumbra.core.keys.v1alpha1.GovernanceKey
	(*v1alpha11.Amount)(nil),               // 36: penumbra.core.num.v1alpha1.Amount
	(*v1alpha12.BalanceCommitment)(nil),    // 37: penumbra.core.asset.v1alpha1.BalanceCommitment
	(*v1alpha1.ConsensusKey)(nil),          // 38: penumbra.core.keys.v1alpha1.ConsensusKey
}
var file_penumbra_core_component_stake_v1alpha1_stake_proto_depIdxs = []int32{
	34, // 0: penumbra.core.component.stake.v1alpha1.Validator.identity_key:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	5,  // 1: penumbra.core.component.stake.v1alpha1.Validator.funding_streams:type_name -> penumbra.core.component.stake.v1alpha1.FundingStream
	35, // 2: penumbra.core.component.stake.v1alpha1.Validator.governance_key:type_name -> penumbra.core.keys.v1alpha1.GovernanceKey
	34, // 3: penumbra.core.component.stake.v1alpha1.ValidatorList.validator_keys:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	32, // 4: penumbra.core.component.stake.v1alpha1.FundingStream.to_address:type_name -> penumbra.core.component.stake.v1alpha1.FundingStream.ToAddress
	33, // 5: penumbra.core.component.stake.v1alpha1.FundingStream.to_community_pool:type_name -> penumbra.core.component.stake.v1alpha1.FundingStream.ToCommunityPool
	34, // 6: penumbra.core.component.stake.v1alpha1.RateData.identity_key:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	34, // 7: penumbra.core.component.stake.v1alpha1.ValidatorStatus.identity_key:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	10, // 8: penumbra.core.component.stake.v1alpha1.ValidatorStatus.state:type_name -> penumbra.core.component.stake.v1alpha1.ValidatorState
	9,  // 9: penumbra.core.component.stake.v1alpha1.ValidatorStatus.bonding_state:type_name -> penumbra.core.component.stake.v1alpha1.BondingState
	0,  // 10: penumbra.core.component.stake.v1alpha1.BondingState.state:type_name -> penumbra.core.component.stake.v1alpha1.BondingState.BondingStateEnum
	1,  // 11: penumbra.core.component.stake.v1alpha1.ValidatorState.state:type_name -> penumbra.core.component.stake.v1alpha1.ValidatorState.ValidatorStateEnum
	3,  // 12: penumbra.core.component.stake.v1alpha1.ValidatorInfo.validator:type_name -> penumbra.core.component.stake.v1alpha1.Validator
	8,  // 13: penumbra.core.component.stake.v1alpha1.ValidatorInfo.status:type_name -> penumbra.core.component.stake.v1alpha1.ValidatorStatus
	6,  // 14: penumbra.core.component.stake.v1alpha1.ValidatorInfo.rate_data:type_name -> penumbra.core.component.stake.v1alpha1.RateData
	3,  // 15: penumbra.core.component.stake.v1alpha1.ValidatorDefinition.validator:type_name -> penumbra.core.component.stake.v1alpha1.Validator
	34, // 16: penumbra.core.component.stake.v1alpha1.Delegate.validator_identity:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	36, // 17: penumbra.core.component.stake.v1alpha1.Delegate.unbonded_amount:type_name -> penumbra.core.num.v1alpha1.Amount
	36, // 18: penumbra.core.component.stake.v1alpha1.Delegate.delegation_amount:type_name -> penumbra.core.num.v1alpha1.Amount
	34, // 19: penumbra.core.component.stake.v1alpha1.Undelegate.validator_identity:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	36, // 20: penumbra.core.component.stake.v1alpha1.Undelegate.unbonded_amount:type_name -> penumbra.core.num.v1alpha1.Amount
	36, // 21: penumbra.core.component.stake.v1alpha1.Undelegate.delegation_amount:type_name -> penumbra.core.num.v1alpha1.Amount
	16, // 22: penumbra.core.component.stake.v1alpha1.UndelegateClaim.body:type_name -> penumbra.core.component.stake.v1alpha1.UndelegateClaimBody
	34, // 23: penumbra.core.component.stake.v1alpha1.UndelegateClaimBody.validator_identity:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	21, // 24: penumbra.core.component.stake.v1alpha1.UndelegateClaimBody.penalty:type_name -> penumbra.core.component.stake.v1alpha1.Penalty
	37, // 25: penumbra.core.component.stake.v1alpha1.UndelegateClaimBody.balance_commitment:type_name -> penumbra.core.asset.v1alpha1.BalanceCommitment
	34, // 26: penumbra.core.component.stake.v1alpha1.UndelegateClaimPlan.validator_identity:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	21, // 27: penumbra.core.component.stake.v1alpha1.UndelegateClaimPlan.penalty:type_name -> penumbra.core.component.stake.v1alpha1.Penalty
	36, // 28: penumbra.core.component.stake.v1alpha1.UndelegateClaimPlan.unbonding_amount:type_name -> penumbra.core.num.v1alpha1.Amount
	13, // 29: penumbra.core.component.stake.v1alpha1.DelegationChanges.delegations:type_name -> penumbra.core.component.stake.v1alpha1.Delegate
	14, // 30: penumbra.core.component.stake.v1alpha1.DelegationChanges.undelegations:type_name -> penumbra.core.component.stake.v1alpha1.Undelegate
	38, // 31: penumbra.core.component.stake.v1alpha1.CurrentConsensusKeys.consensus_keys:type_name -> penumbra.core.keys.v1alpha1.ConsensusKey
	11, // 32: penumbra.core.component.stake.v1alpha1.ValidatorInfoResponse.validator_info:type_name -> penumbra.core.component.stake.v1alpha1.ValidatorInfo
	34, // 33: penumbra.core.component.stake.v1alpha1.ValidatorStatusRequest.identity_key:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	8,  // 34: penumbra.core.component.stake.v1alpha1.ValidatorStatusResponse.status:type_name -> penumbra.core.component.stake.v1alpha1.ValidatorStatus
	34, // 35: penumbra.core.component.stake.v1alpha1.ValidatorPenaltyRequest.identity_key:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	21, // 36: penumbra.core.component.stake.v1alpha1.ValidatorPenaltyResponse.penalty:type_name -> penumbra.core.component.stake.v1alpha1.Penalty
	34, // 37: penumbra.core.component.stake.v1alpha1.CurrentValidatorRateRequest.identity_key:type_name -> penumbra.core.keys.v1alpha1.IdentityKey
	6,  // 38: penumbra.core.component.stake.v1alpha1.CurrentValidatorRateResponse.data:type_name -> penumbra.core.component.stake.v1alpha1.RateData
	30, // 39: penumbra.core.component.stake.v1alpha1.GenesisContent.stake_params:type_name -> penumbra.core.component.stake.v1alpha1.StakeParameters
	3,  // 40: penumbra.core.component.stake.v1alpha1.GenesisContent.validators:type_name -> penumbra.core.component.stake.v1alpha1.Validator
	22, // 41: penumbra.core.component.stake.v1alpha1.QueryService.ValidatorInfo:input_type -> penumbra.core.component.stake.v1alpha1.ValidatorInfoRequest
	24, // 42: penumbra.core.component.stake.v1alpha1.QueryService.ValidatorStatus:input_type -> penumbra.core.component.stake.v1alpha1.ValidatorStatusRequest
	26, // 43: penumbra.core.component.stake.v1alpha1.QueryService.ValidatorPenalty:input_type -> penumbra.core.component.stake.v1alpha1.ValidatorPenaltyRequest
	28, // 44: penumbra.core.component.stake.v1alpha1.QueryService.CurrentValidatorRate:input_type -> penumbra.core.component.stake.v1alpha1.CurrentValidatorRateRequest
	23, // 45: penumbra.core.component.stake.v1alpha1.QueryService.ValidatorInfo:output_type -> penumbra.core.component.stake.v1alpha1.ValidatorInfoResponse
	25, // 46: penumbra.core.component.stake.v1alpha1.QueryService.ValidatorStatus:output_type -> penumbra.core.component.stake.v1alpha1.ValidatorStatusResponse
	27, // 47: penumbra.core.component.stake.v1alpha1.QueryService.ValidatorPenalty:output_type -> penumbra.core.component.stake.v1alpha1.ValidatorPenaltyResponse
	29, // 48: penumbra.core.component.stake.v1alpha1.QueryService.CurrentValidatorRate:output_type -> penumbra.core.component.stake.v1alpha1.CurrentValidatorRateResponse
	45, // [45:49] is the sub-list for method output_type
	41, // [41:45] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_penumbra_core_component_stake_v1alpha1_stake_proto_init() }
func file_penumbra_core_component_stake_v1alpha1_stake_proto_init() {
	if File_penumbra_core_component_stake_v1alpha1_stake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKUndelegateClaimProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BondingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Undelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateClaimBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndelegateClaimPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uptime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentConsensusKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Penalty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorPenaltyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorPenaltyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentValidatorRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentValidatorRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingStream_ToAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingStream_ToCommunityPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*FundingStream_ToAddress_)(nil),
		(*FundingStream_ToCommunityPool_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_penumbra_core_component_stake_v1alpha1_stake_proto_goTypes,
		DependencyIndexes: file_penumbra_core_component_stake_v1alpha1_stake_proto_depIdxs,
		EnumInfos:         file_penumbra_core_component_stake_v1alpha1_stake_proto_enumTypes,
		MessageInfos:      file_penumbra_core_component_stake_v1alpha1_stake_proto_msgTypes,
	}.Build()
	File_penumbra_core_component_stake_v1alpha1_stake_proto = out.File
	file_penumbra_core_component_stake_v1alpha1_stake_proto_rawDesc = nil
	file_penumbra_core_component_stake_v1alpha1_stake_proto_goTypes = nil
	file_penumbra_core_component_stake_v1alpha1_stake_proto_depIdxs = nil
}
