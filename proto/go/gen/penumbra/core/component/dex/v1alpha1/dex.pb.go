// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: penumbra/core/component/dex/v1alpha1/dex.proto

package dexv1alpha1

import (
	v1alpha14 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/asset/v1alpha1"
	v1alpha11 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/component/fee/v1alpha1"
	v1alpha1 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/component/sct/v1alpha1"
	v1alpha16 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/component/shielded_pool/v1alpha1"
	v1alpha15 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/keys/v1alpha1"
	v1alpha13 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/num/v1alpha1"
	v1alpha12 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/crypto/tct/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PositionState_PositionStateEnum int32

const (
	PositionState_POSITION_STATE_ENUM_UNSPECIFIED PositionState_PositionStateEnum = 0
	// The position has been opened, is active, has reserves and accumulated
	// fees, and can be traded against.
	PositionState_POSITION_STATE_ENUM_OPENED PositionState_PositionStateEnum = 1
	// The position has been closed, is inactive and can no longer be traded
	// against, but still has reserves and accumulated fees.
	PositionState_POSITION_STATE_ENUM_CLOSED PositionState_PositionStateEnum = 2
	// The final reserves and accumulated fees have been withdrawn, leaving an
	// empty, inactive position awaiting (possible) retroactive rewards.
	PositionState_POSITION_STATE_ENUM_WITHDRAWN PositionState_PositionStateEnum = 3
	// Any retroactive rewards have been claimed. The position is now an inert,
	// historical artefact.
	PositionState_POSITION_STATE_ENUM_CLAIMED PositionState_PositionStateEnum = 4
)

// Enum value maps for PositionState_PositionStateEnum.
var (
	PositionState_PositionStateEnum_name = map[int32]string{
		0: "POSITION_STATE_ENUM_UNSPECIFIED",
		1: "POSITION_STATE_ENUM_OPENED",
		2: "POSITION_STATE_ENUM_CLOSED",
		3: "POSITION_STATE_ENUM_WITHDRAWN",
		4: "POSITION_STATE_ENUM_CLAIMED",
	}
	PositionState_PositionStateEnum_value = map[string]int32{
		"POSITION_STATE_ENUM_UNSPECIFIED": 0,
		"POSITION_STATE_ENUM_OPENED":      1,
		"POSITION_STATE_ENUM_CLOSED":      2,
		"POSITION_STATE_ENUM_WITHDRAWN":   3,
		"POSITION_STATE_ENUM_CLAIMED":     4,
	}
)

func (x PositionState_PositionStateEnum) Enum() *PositionState_PositionStateEnum {
	p := new(PositionState_PositionStateEnum)
	*p = x
	return p
}

func (x PositionState_PositionStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionState_PositionStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_enumTypes[0].Descriptor()
}

func (PositionState_PositionStateEnum) Type() protoreflect.EnumType {
	return &file_penumbra_core_component_dex_v1alpha1_dex_proto_enumTypes[0]
}

func (x PositionState_PositionStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionState_PositionStateEnum.Descriptor instead.
func (PositionState_PositionStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{20, 0}
}

// A Penumbra ZK swap proof.
type ZKSwapProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKSwapProof) Reset() {
	*x = ZKSwapProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKSwapProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKSwapProof) ProtoMessage() {}

func (x *ZKSwapProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKSwapProof.ProtoReflect.Descriptor instead.
func (*ZKSwapProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{0}
}

func (x *ZKSwapProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK swap claim proof.
type ZKSwapClaimProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKSwapClaimProof) Reset() {
	*x = ZKSwapClaimProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKSwapClaimProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKSwapClaimProof) ProtoMessage() {}

func (x *ZKSwapClaimProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKSwapClaimProof.ProtoReflect.Descriptor instead.
func (*ZKSwapClaimProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{1}
}

func (x *ZKSwapClaimProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A transaction action that submits a swap to the dex.
type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the Swap proof.
	Proof *ZKSwapProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	// Encapsulates the authorized fields of the Swap action, used in signing.
	Body *SwapBody `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{2}
}

func (x *Swap) GetProof() *ZKSwapProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Swap) GetBody() *SwapBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// A transaction action that obtains assets previously confirmed
// via a Swap transaction. Does not include a spend authorization
// signature, as it is only capable of consuming the NFT from a
// Swap transaction.
type SwapClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the SwapClaim proof.
	Proof *ZKSwapClaimProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
	// Encapsulates the authorized fields of the SwapClaim action, used in signing.
	Body *SwapClaimBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// The epoch duration of the chain when the swap claim took place.
	EpochDuration uint64 `protobuf:"varint,7,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
}

func (x *SwapClaim) Reset() {
	*x = SwapClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaim) ProtoMessage() {}

func (x *SwapClaim) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaim.ProtoReflect.Descriptor instead.
func (*SwapClaim) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{3}
}

func (x *SwapClaim) GetProof() *ZKSwapClaimProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SwapClaim) GetBody() *SwapClaimBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *SwapClaim) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

// Encapsulates the authorized fields of the SwapClaim action, used in signing.
type SwapClaimBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nullifier for the Swap commitment to be consumed.
	Nullifier *v1alpha1.Nullifier `protobuf:"bytes,1,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The fee allows `SwapClaim` without an additional `Spend`.
	Fee *v1alpha11.Fee `protobuf:"bytes,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// Note output for asset 1.
	Output_1Commitment *v1alpha12.StateCommitment `protobuf:"bytes,3,opt,name=output_1_commitment,json=output1Commitment,proto3" json:"output_1_commitment,omitempty"`
	// Note output for asset 2.
	Output_2Commitment *v1alpha12.StateCommitment `protobuf:"bytes,4,opt,name=output_2_commitment,json=output2Commitment,proto3" json:"output_2_commitment,omitempty"`
	// Input and output amounts, and asset IDs for the assets in the swap.
	OutputData *BatchSwapOutputData `protobuf:"bytes,6,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
}

func (x *SwapClaimBody) Reset() {
	*x = SwapClaimBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimBody) ProtoMessage() {}

func (x *SwapClaimBody) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimBody.ProtoReflect.Descriptor instead.
func (*SwapClaimBody) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{4}
}

func (x *SwapClaimBody) GetNullifier() *v1alpha1.Nullifier {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *SwapClaimBody) GetFee() *v1alpha11.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SwapClaimBody) GetOutput_1Commitment() *v1alpha12.StateCommitment {
	if x != nil {
		return x.Output_1Commitment
	}
	return nil
}

func (x *SwapClaimBody) GetOutput_2Commitment() *v1alpha12.StateCommitment {
	if x != nil {
		return x.Output_2Commitment
	}
	return nil
}

func (x *SwapClaimBody) GetOutputData() *BatchSwapOutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

// The authorized data of a Swap transaction.
type SwapBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The amount for asset 1.
	Delta_1I *v1alpha13.Amount `protobuf:"bytes,2,opt,name=delta_1_i,json=delta1I,proto3" json:"delta_1_i,omitempty"`
	// The amount for asset 2.
	Delta_2I *v1alpha13.Amount `protobuf:"bytes,3,opt,name=delta_2_i,json=delta2I,proto3" json:"delta_2_i,omitempty"`
	// A commitment to a prepaid fee for the future SwapClaim.
	// This is recorded separately from delta_j_i because it's shielded;
	// in the future we'll want separate commitments to each delta_j_i
	// anyways in order to prove consistency with flow encryption.
	FeeCommitment *v1alpha14.BalanceCommitment `protobuf:"bytes,4,opt,name=fee_commitment,json=feeCommitment,proto3" json:"fee_commitment,omitempty"`
	// The swap commitment and encryption of the swap data.
	Payload *SwapPayload `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SwapBody) Reset() {
	*x = SwapBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapBody) ProtoMessage() {}

func (x *SwapBody) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapBody.ProtoReflect.Descriptor instead.
func (*SwapBody) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{5}
}

func (x *SwapBody) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *SwapBody) GetDelta_1I() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_1I
	}
	return nil
}

func (x *SwapBody) GetDelta_2I() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_2I
	}
	return nil
}

func (x *SwapBody) GetFeeCommitment() *v1alpha14.BalanceCommitment {
	if x != nil {
		return x.FeeCommitment
	}
	return nil
}

func (x *SwapBody) GetPayload() *SwapPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SwapPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commitment    *v1alpha12.StateCommitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	EncryptedSwap []byte                     `protobuf:"bytes,2,opt,name=encrypted_swap,json=encryptedSwap,proto3" json:"encrypted_swap,omitempty"`
}

func (x *SwapPayload) Reset() {
	*x = SwapPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPayload) ProtoMessage() {}

func (x *SwapPayload) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPayload.ProtoReflect.Descriptor instead.
func (*SwapPayload) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{6}
}

func (x *SwapPayload) GetCommitment() *v1alpha12.StateCommitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *SwapPayload) GetEncryptedSwap() []byte {
	if x != nil {
		return x.EncryptedSwap
	}
	return nil
}

type SwapPlaintext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// Input amount of asset 1
	Delta_1I *v1alpha13.Amount `protobuf:"bytes,2,opt,name=delta_1_i,json=delta1I,proto3" json:"delta_1_i,omitempty"`
	// Input amount of asset 2
	Delta_2I *v1alpha13.Amount `protobuf:"bytes,3,opt,name=delta_2_i,json=delta2I,proto3" json:"delta_2_i,omitempty"`
	// Pre-paid fee to claim the swap
	ClaimFee *v1alpha11.Fee `protobuf:"bytes,4,opt,name=claim_fee,json=claimFee,proto3" json:"claim_fee,omitempty"`
	// Address that will claim the swap outputs via SwapClaim.
	ClaimAddress *v1alpha15.Address `protobuf:"bytes,5,opt,name=claim_address,json=claimAddress,proto3" json:"claim_address,omitempty"`
	// Swap rseed (blinding factors are derived from this)
	Rseed []byte `protobuf:"bytes,6,opt,name=rseed,proto3" json:"rseed,omitempty"`
}

func (x *SwapPlaintext) Reset() {
	*x = SwapPlaintext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPlaintext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPlaintext) ProtoMessage() {}

func (x *SwapPlaintext) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPlaintext.ProtoReflect.Descriptor instead.
func (*SwapPlaintext) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{7}
}

func (x *SwapPlaintext) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *SwapPlaintext) GetDelta_1I() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_1I
	}
	return nil
}

func (x *SwapPlaintext) GetDelta_2I() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_2I
	}
	return nil
}

func (x *SwapPlaintext) GetClaimFee() *v1alpha11.Fee {
	if x != nil {
		return x.ClaimFee
	}
	return nil
}

func (x *SwapPlaintext) GetClaimAddress() *v1alpha15.Address {
	if x != nil {
		return x.ClaimAddress
	}
	return nil
}

func (x *SwapPlaintext) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

type SwapPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext version of the swap to be performed.
	SwapPlaintext *SwapPlaintext `protobuf:"bytes,1,opt,name=swap_plaintext,json=swapPlaintext,proto3" json:"swap_plaintext,omitempty"`
	// The blinding factor for the fee commitment. The fee in the SwapPlan is private to prevent linkability with the SwapClaim.
	FeeBlinding []byte `protobuf:"bytes,2,opt,name=fee_blinding,json=feeBlinding,proto3" json:"fee_blinding,omitempty"`
	// The first blinding factor to use for the ZK swap proof.
	ProofBlindingR []byte `protobuf:"bytes,3,opt,name=proof_blinding_r,json=proofBlindingR,proto3" json:"proof_blinding_r,omitempty"`
	// The second blinding factor to use for the ZK swap proof.
	ProofBlindingS []byte `protobuf:"bytes,4,opt,name=proof_blinding_s,json=proofBlindingS,proto3" json:"proof_blinding_s,omitempty"`
}

func (x *SwapPlan) Reset() {
	*x = SwapPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPlan) ProtoMessage() {}

func (x *SwapPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPlan.ProtoReflect.Descriptor instead.
func (*SwapPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{8}
}

func (x *SwapPlan) GetSwapPlaintext() *SwapPlaintext {
	if x != nil {
		return x.SwapPlaintext
	}
	return nil
}

func (x *SwapPlan) GetFeeBlinding() []byte {
	if x != nil {
		return x.FeeBlinding
	}
	return nil
}

func (x *SwapPlan) GetProofBlindingR() []byte {
	if x != nil {
		return x.ProofBlindingR
	}
	return nil
}

func (x *SwapPlan) GetProofBlindingS() []byte {
	if x != nil {
		return x.ProofBlindingS
	}
	return nil
}

type SwapClaimPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext version of the swap to be performed.
	SwapPlaintext *SwapPlaintext `protobuf:"bytes,1,opt,name=swap_plaintext,json=swapPlaintext,proto3" json:"swap_plaintext,omitempty"`
	// The position of the swap commitment.
	Position uint64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// Input and output amounts for the Swap.
	OutputData *BatchSwapOutputData `protobuf:"bytes,3,opt,name=output_data,json=outputData,proto3" json:"output_data,omitempty"`
	// The epoch duration, used in proving.
	EpochDuration uint64 `protobuf:"varint,4,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
	// The first blinding factor to use for the ZK swap claim proof.
	ProofBlindingR []byte `protobuf:"bytes,5,opt,name=proof_blinding_r,json=proofBlindingR,proto3" json:"proof_blinding_r,omitempty"`
	// The second blinding factor to use for the ZK swap claim proof.
	ProofBlindingS []byte `protobuf:"bytes,6,opt,name=proof_blinding_s,json=proofBlindingS,proto3" json:"proof_blinding_s,omitempty"`
}

func (x *SwapClaimPlan) Reset() {
	*x = SwapClaimPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimPlan) ProtoMessage() {}

func (x *SwapClaimPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimPlan.ProtoReflect.Descriptor instead.
func (*SwapClaimPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{9}
}

func (x *SwapClaimPlan) GetSwapPlaintext() *SwapPlaintext {
	if x != nil {
		return x.SwapPlaintext
	}
	return nil
}

func (x *SwapClaimPlan) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SwapClaimPlan) GetOutputData() *BatchSwapOutputData {
	if x != nil {
		return x.OutputData
	}
	return nil
}

func (x *SwapClaimPlan) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *SwapClaimPlan) GetProofBlindingR() []byte {
	if x != nil {
		return x.ProofBlindingR
	}
	return nil
}

func (x *SwapClaimPlan) GetProofBlindingS() []byte {
	if x != nil {
		return x.ProofBlindingS
	}
	return nil
}

type SwapView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SwapView:
	//
	//	*SwapView_Visible_
	//	*SwapView_Opaque_
	SwapView isSwapView_SwapView `protobuf_oneof:"swap_view"`
}

func (x *SwapView) Reset() {
	*x = SwapView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapView) ProtoMessage() {}

func (x *SwapView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapView.ProtoReflect.Descriptor instead.
func (*SwapView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{10}
}

func (m *SwapView) GetSwapView() isSwapView_SwapView {
	if m != nil {
		return m.SwapView
	}
	return nil
}

func (x *SwapView) GetVisible() *SwapView_Visible {
	if x, ok := x.GetSwapView().(*SwapView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *SwapView) GetOpaque() *SwapView_Opaque {
	if x, ok := x.GetSwapView().(*SwapView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isSwapView_SwapView interface {
	isSwapView_SwapView()
}

type SwapView_Visible_ struct {
	Visible *SwapView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type SwapView_Opaque_ struct {
	Opaque *SwapView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*SwapView_Visible_) isSwapView_SwapView() {}

func (*SwapView_Opaque_) isSwapView_SwapView() {}

type SwapClaimView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SwapClaimView:
	//
	//	*SwapClaimView_Visible_
	//	*SwapClaimView_Opaque_
	SwapClaimView isSwapClaimView_SwapClaimView `protobuf_oneof:"swap_claim_view"`
}

func (x *SwapClaimView) Reset() {
	*x = SwapClaimView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimView) ProtoMessage() {}

func (x *SwapClaimView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimView.ProtoReflect.Descriptor instead.
func (*SwapClaimView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{11}
}

func (m *SwapClaimView) GetSwapClaimView() isSwapClaimView_SwapClaimView {
	if m != nil {
		return m.SwapClaimView
	}
	return nil
}

func (x *SwapClaimView) GetVisible() *SwapClaimView_Visible {
	if x, ok := x.GetSwapClaimView().(*SwapClaimView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *SwapClaimView) GetOpaque() *SwapClaimView_Opaque {
	if x, ok := x.GetSwapClaimView().(*SwapClaimView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isSwapClaimView_SwapClaimView interface {
	isSwapClaimView_SwapClaimView()
}

type SwapClaimView_Visible_ struct {
	Visible *SwapClaimView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type SwapClaimView_Opaque_ struct {
	Opaque *SwapClaimView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*SwapClaimView_Visible_) isSwapClaimView_SwapClaimView() {}

func (*SwapClaimView_Opaque_) isSwapClaimView_SwapClaimView() {}

// Holds two asset IDs. Ordering doesn't reflect trading direction. Instead, we
// require `asset_1 < asset_2` as field elements, to ensure a canonical
// representation of an unordered pair.
type TradingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first asset of the pair.
	Asset_1 *v1alpha14.AssetId `protobuf:"bytes,1,opt,name=asset_1,json=asset1,proto3" json:"asset_1,omitempty"`
	// The second asset of the pair.
	Asset_2 *v1alpha14.AssetId `protobuf:"bytes,2,opt,name=asset_2,json=asset2,proto3" json:"asset_2,omitempty"`
}

func (x *TradingPair) Reset() {
	*x = TradingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPair) ProtoMessage() {}

func (x *TradingPair) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPair.ProtoReflect.Descriptor instead.
func (*TradingPair) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{12}
}

func (x *TradingPair) GetAsset_1() *v1alpha14.AssetId {
	if x != nil {
		return x.Asset_1
	}
	return nil
}

func (x *TradingPair) GetAsset_2() *v1alpha14.AssetId {
	if x != nil {
		return x.Asset_2
	}
	return nil
}

// Encodes a trading pair starting from asset `start`
// and ending on asset `end`.
type DirectedTradingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start asset of the pair.
	Start *v1alpha14.AssetId `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The end asset of the pair.
	End *v1alpha14.AssetId `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *DirectedTradingPair) Reset() {
	*x = DirectedTradingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectedTradingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectedTradingPair) ProtoMessage() {}

func (x *DirectedTradingPair) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectedTradingPair.ProtoReflect.Descriptor instead.
func (*DirectedTradingPair) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{13}
}

func (x *DirectedTradingPair) GetStart() *v1alpha14.AssetId {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DirectedTradingPair) GetEnd() *v1alpha14.AssetId {
	if x != nil {
		return x.End
	}
	return nil
}

// Records the result of a batch swap on-chain.
//
// Used as a public input to a swap claim proof, as it implies the effective
// clearing price for the batch.
type BatchSwapOutputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total amount of asset 1 that was input to the batch swap.
	Delta_1 *v1alpha13.Amount `protobuf:"bytes,1,opt,name=delta_1,json=delta1,proto3" json:"delta_1,omitempty"`
	// The total amount of asset 2 that was input to the batch swap.
	Delta_2 *v1alpha13.Amount `protobuf:"bytes,2,opt,name=delta_2,json=delta2,proto3" json:"delta_2,omitempty"`
	// The total amount of asset 1 that was output from the batch swap for 2=>1 trades.
	Lambda_1 *v1alpha13.Amount `protobuf:"bytes,3,opt,name=lambda_1,json=lambda1,proto3" json:"lambda_1,omitempty"`
	// The total amount of asset 2 that was output from the batch swap for 1=>2 trades.
	Lambda_2 *v1alpha13.Amount `protobuf:"bytes,4,opt,name=lambda_2,json=lambda2,proto3" json:"lambda_2,omitempty"`
	// The total amount of asset 1 that was returned unfilled from the batch swap for 1=>2 trades.
	Unfilled_1 *v1alpha13.Amount `protobuf:"bytes,5,opt,name=unfilled_1,json=unfilled1,proto3" json:"unfilled_1,omitempty"`
	// The total amount of asset 2 that was returned unfilled from the batch swap for 2=>1 trades.
	Unfilled_2 *v1alpha13.Amount `protobuf:"bytes,6,opt,name=unfilled_2,json=unfilled2,proto3" json:"unfilled_2,omitempty"`
	// The height for which the batch swap data is valid.
	Height uint64 `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
	// The trading pair associated with the batch swap.
	TradingPair *TradingPair `protobuf:"bytes,8,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The starting block height of the epoch for which the batch swap data is valid.
	EpochStartingHeight uint64 `protobuf:"varint,9,opt,name=epoch_starting_height,json=epochStartingHeight,proto3" json:"epoch_starting_height,omitempty"`
}

func (x *BatchSwapOutputData) Reset() {
	*x = BatchSwapOutputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSwapOutputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSwapOutputData) ProtoMessage() {}

func (x *BatchSwapOutputData) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSwapOutputData.ProtoReflect.Descriptor instead.
func (*BatchSwapOutputData) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{14}
}

func (x *BatchSwapOutputData) GetDelta_1() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_1
	}
	return nil
}

func (x *BatchSwapOutputData) GetDelta_2() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_2
	}
	return nil
}

func (x *BatchSwapOutputData) GetLambda_1() *v1alpha13.Amount {
	if x != nil {
		return x.Lambda_1
	}
	return nil
}

func (x *BatchSwapOutputData) GetLambda_2() *v1alpha13.Amount {
	if x != nil {
		return x.Lambda_2
	}
	return nil
}

func (x *BatchSwapOutputData) GetUnfilled_1() *v1alpha13.Amount {
	if x != nil {
		return x.Unfilled_1
	}
	return nil
}

func (x *BatchSwapOutputData) GetUnfilled_2() *v1alpha13.Amount {
	if x != nil {
		return x.Unfilled_2
	}
	return nil
}

func (x *BatchSwapOutputData) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BatchSwapOutputData) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *BatchSwapOutputData) GetEpochStartingHeight() uint64 {
	if x != nil {
		return x.EpochStartingHeight
	}
	return 0
}

// The trading function for a specific pair.
// For a pair (asset_1, asset_2), a trading function is defined by:
// `phi(R) = p*R_1 + q*R_2` and `gamma = 1 - fee`.
// The trading function is frequently referred to as "phi".
type TradingFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Component *BareTradingFunction `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	Pair      *TradingPair         `protobuf:"bytes,2,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *TradingFunction) Reset() {
	*x = TradingFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingFunction) ProtoMessage() {}

func (x *TradingFunction) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingFunction.ProtoReflect.Descriptor instead.
func (*TradingFunction) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{15}
}

func (x *TradingFunction) GetComponent() *BareTradingFunction {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *TradingFunction) GetPair() *TradingPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

// The minimum amount of data describing a trading function.
//
// This implicitly treats the trading function as being between assets 1 and 2,
// without specifying what those assets are, to avoid duplicating data (each
// asset ID alone is twice the size of the trading function).
type BareTradingFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee uint32 `protobuf:"varint,1,opt,name=fee,proto3" json:"fee,omitempty"`
	// This is not actually an amount, it's an integer the same width as an amount
	P *v1alpha13.Amount `protobuf:"bytes,2,opt,name=p,proto3" json:"p,omitempty"`
	// This is not actually an amount, it's an integer the same width as an amount
	Q *v1alpha13.Amount `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
}

func (x *BareTradingFunction) Reset() {
	*x = BareTradingFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BareTradingFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BareTradingFunction) ProtoMessage() {}

func (x *BareTradingFunction) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BareTradingFunction.ProtoReflect.Descriptor instead.
func (*BareTradingFunction) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{16}
}

func (x *BareTradingFunction) GetFee() uint32 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *BareTradingFunction) GetP() *v1alpha13.Amount {
	if x != nil {
		return x.P
	}
	return nil
}

func (x *BareTradingFunction) GetQ() *v1alpha13.Amount {
	if x != nil {
		return x.Q
	}
	return nil
}

// The reserves of a position.
//
// Like a position, this implicitly treats the trading function as being
// between assets 1 and 2, without specifying what those assets are, to avoid
// duplicating data (each asset ID alone is four times the size of the
// reserves).
type Reserves struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R1 *v1alpha13.Amount `protobuf:"bytes,1,opt,name=r1,proto3" json:"r1,omitempty"`
	R2 *v1alpha13.Amount `protobuf:"bytes,2,opt,name=r2,proto3" json:"r2,omitempty"`
}

func (x *Reserves) Reset() {
	*x = Reserves{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reserves) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reserves) ProtoMessage() {}

func (x *Reserves) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reserves.ProtoReflect.Descriptor instead.
func (*Reserves) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{17}
}

func (x *Reserves) GetR1() *v1alpha13.Amount {
	if x != nil {
		return x.R1
	}
	return nil
}

func (x *Reserves) GetR2() *v1alpha13.Amount {
	if x != nil {
		return x.R2
	}
	return nil
}

// Data identifying a position.
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phi *TradingFunction `protobuf:"bytes,1,opt,name=phi,proto3" json:"phi,omitempty"`
	// A random value used to disambiguate different positions with the exact same
	// trading function.  The chain should reject newly created positions with the
	// same nonce as an existing position.  This ensures that `PositionId`s will
	// be unique, and allows us to track position ownership with a
	// sequence of stateful NFTs based on the `PositionId`.
	Nonce    []byte         `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	State    *PositionState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Reserves *Reserves      `protobuf:"bytes,4,opt,name=reserves,proto3" json:"reserves,omitempty"`
	// / If set to true, the position is a limit-order and will be closed
	// / immediately after being filled.
	CloseOnFill bool `protobuf:"varint,5,opt,name=close_on_fill,json=closeOnFill,proto3" json:"close_on_fill,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{18}
}

func (x *Position) GetPhi() *TradingFunction {
	if x != nil {
		return x.Phi
	}
	return nil
}

func (x *Position) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Position) GetState() *PositionState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Position) GetReserves() *Reserves {
	if x != nil {
		return x.Reserves
	}
	return nil
}

func (x *Position) GetCloseOnFill() bool {
	if x != nil {
		return x.CloseOnFill
	}
	return false
}

// A hash of a `Position`.
type PositionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes of the position ID.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Alternatively, a Bech32m-encoded string representation of the `inner`
	// bytes.
	//
	// NOTE: implementations are not required to support parsing this field.
	// Implementations should prefer to encode the bytes in all messages they
	// produce. Implementations must not accept messages with both `inner` and
	// `alt_bech32m` set.
	AltBech32M string `protobuf:"bytes,2,opt,name=alt_bech32m,json=altBech32m,proto3" json:"alt_bech32m,omitempty"`
}

func (x *PositionId) Reset() {
	*x = PositionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionId) ProtoMessage() {}

func (x *PositionId) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionId.ProtoReflect.Descriptor instead.
func (*PositionId) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{19}
}

func (x *PositionId) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PositionId) GetAltBech32M() string {
	if x != nil {
		return x.AltBech32M
	}
	return ""
}

// The state of a position.
type PositionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State PositionState_PositionStateEnum `protobuf:"varint,1,opt,name=state,proto3,enum=penumbra.core.component.dex.v1alpha1.PositionState_PositionStateEnum" json:"state,omitempty"`
}

func (x *PositionState) Reset() {
	*x = PositionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionState) ProtoMessage() {}

func (x *PositionState) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionState.ProtoReflect.Descriptor instead.
func (*PositionState) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{20}
}

func (x *PositionState) GetState() PositionState_PositionStateEnum {
	if x != nil {
		return x.State
	}
	return PositionState_POSITION_STATE_ENUM_UNSPECIFIED
}

// An LPNFT tracking both ownership and state of a position.
//
// Tracking the state as part of the LPNFT means that all LP-related actions can
// be authorized by spending funds: a state transition (e.g., closing a
// position) is modeled as spending an "open position LPNFT" and minting a
// "closed position LPNFT" for the same (globally unique) position ID.
//
// This means that the LP mechanics can be agnostic to the mechanism used to
// record custody and spend authorization.  For instance, they can be recorded
// in the shielded pool, where custody is based on off-chain keys, or they could
// be recorded in a programmatic on-chain account (in the future, e.g., to
// support interchain accounts).  This also means that LP-related actions don't
// require any cryptographic implementation (proofs, signatures, etc), other
// than hooking into the value commitment mechanism used for transaction
// balances.
type LpNft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId    `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	State      *PositionState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *LpNft) Reset() {
	*x = LpNft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LpNft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LpNft) ProtoMessage() {}

func (x *LpNft) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LpNft.ProtoReflect.Descriptor instead.
func (*LpNft) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{21}
}

func (x *LpNft) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *LpNft) GetState() *PositionState {
	if x != nil {
		return x.State
	}
	return nil
}

// A transaction action that opens a new position.
//
// This action's contribution to the transaction's value balance is to consume
// the initial reserves and contribute an opened position NFT.
type PositionOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the data defining the position, sufficient to compute its `PositionId`.
	//
	// Positions are immutable, so the `PositionData` (and hence the `PositionId`)
	// are unchanged over the entire lifetime of the position.
	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *PositionOpen) Reset() {
	*x = PositionOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionOpen) ProtoMessage() {}

func (x *PositionOpen) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionOpen.ProtoReflect.Descriptor instead.
func (*PositionOpen) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{22}
}

func (x *PositionOpen) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

// A transaction action that closes a position.
//
// This action's contribution to the transaction's value balance is to consume
// an opened position NFT and contribute a closed position NFT.
//
// Closing a position does not immediately withdraw funds, because Penumbra
// transactions (like any ZK transaction model) are early-binding: the prover
// must know the state transition they prove knowledge of, and they cannot know
// the final reserves with certainty until after the position has been deactivated.
type PositionClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *PositionClose) Reset() {
	*x = PositionClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionClose) ProtoMessage() {}

func (x *PositionClose) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionClose.ProtoReflect.Descriptor instead.
func (*PositionClose) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{23}
}

func (x *PositionClose) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

// A transaction action that withdraws funds from a closed position.
//
// This action's contribution to the transaction's value balance is to consume a
// closed position NFT and contribute a withdrawn position NFT, as well as all
// of the funds that were in the position at the time of closing.
type PositionWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// A transparent (zero blinding factor) commitment to the position's final reserves and fees.
	//
	// The chain will check this commitment by recomputing it with the on-chain state.
	ReservesCommitment *v1alpha14.BalanceCommitment `protobuf:"bytes,2,opt,name=reserves_commitment,json=reservesCommitment,proto3" json:"reserves_commitment,omitempty"`
}

func (x *PositionWithdraw) Reset() {
	*x = PositionWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionWithdraw) ProtoMessage() {}

func (x *PositionWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionWithdraw.ProtoReflect.Descriptor instead.
func (*PositionWithdraw) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{24}
}

func (x *PositionWithdraw) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *PositionWithdraw) GetReservesCommitment() *v1alpha14.BalanceCommitment {
	if x != nil {
		return x.ReservesCommitment
	}
	return nil
}

// A transaction action that claims retroactive rewards for a historical
// position.
//
// This action's contribution to the transaction's value balance is to consume a
// withdrawn position NFT and contribute its reward balance.
type PositionRewardClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// A transparent (zero blinding factor) commitment to the position's accumulated rewards.
	//
	// The chain will check this commitment by recomputing it with the on-chain state.
	RewardsCommitment *v1alpha14.BalanceCommitment `protobuf:"bytes,2,opt,name=rewards_commitment,json=rewardsCommitment,proto3" json:"rewards_commitment,omitempty"`
}

func (x *PositionRewardClaim) Reset() {
	*x = PositionRewardClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRewardClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRewardClaim) ProtoMessage() {}

func (x *PositionRewardClaim) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionRewardClaim.ProtoReflect.Descriptor instead.
func (*PositionRewardClaim) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{25}
}

func (x *PositionRewardClaim) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *PositionRewardClaim) GetRewardsCommitment() *v1alpha14.BalanceCommitment {
	if x != nil {
		return x.RewardsCommitment
	}
	return nil
}

// Contains the entire execution of a particular swap.
type SwapExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traces []*SwapExecution_Trace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty"`
	// The total input amount for this execution.
	Input *v1alpha14.Value `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// The total output amount for this execution.
	Output *v1alpha14.Value `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SwapExecution) Reset() {
	*x = SwapExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapExecution) ProtoMessage() {}

func (x *SwapExecution) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapExecution.ProtoReflect.Descriptor instead.
func (*SwapExecution) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{26}
}

func (x *SwapExecution) GetTraces() []*SwapExecution_Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

func (x *SwapExecution) GetInput() *v1alpha14.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SwapExecution) GetOutput() *v1alpha14.Value {
	if x != nil {
		return x.Output
	}
	return nil
}

// Contains private and public data for withdrawing funds from a closed position.
type PositionWithdrawPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserves   *Reserves    `protobuf:"bytes,1,opt,name=reserves,proto3" json:"reserves,omitempty"`
	PositionId *PositionId  `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Pair       *TradingPair `protobuf:"bytes,3,opt,name=pair,proto3" json:"pair,omitempty"`
}

func (x *PositionWithdrawPlan) Reset() {
	*x = PositionWithdrawPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionWithdrawPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionWithdrawPlan) ProtoMessage() {}

func (x *PositionWithdrawPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionWithdrawPlan.ProtoReflect.Descriptor instead.
func (*PositionWithdrawPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{27}
}

func (x *PositionWithdrawPlan) GetReserves() *Reserves {
	if x != nil {
		return x.Reserves
	}
	return nil
}

func (x *PositionWithdrawPlan) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *PositionWithdrawPlan) GetPair() *TradingPair {
	if x != nil {
		return x.Pair
	}
	return nil
}

// Contains private and public data for claiming rewards from a position.
type PositionRewardClaimPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reserves *Reserves `protobuf:"bytes,1,opt,name=reserves,proto3" json:"reserves,omitempty"`
}

func (x *PositionRewardClaimPlan) Reset() {
	*x = PositionRewardClaimPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRewardClaimPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRewardClaimPlan) ProtoMessage() {}

func (x *PositionRewardClaimPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionRewardClaimPlan.ProtoReflect.Descriptor instead.
func (*PositionRewardClaimPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{28}
}

func (x *PositionRewardClaimPlan) GetReserves() *Reserves {
	if x != nil {
		return x.Reserves
	}
	return nil
}

// Requests batch swap data associated with a given height and trading pair from the view service.
type BatchSwapOutputDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId     string       `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height      uint64       `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TradingPair *TradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (x *BatchSwapOutputDataRequest) Reset() {
	*x = BatchSwapOutputDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSwapOutputDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSwapOutputDataRequest) ProtoMessage() {}

func (x *BatchSwapOutputDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSwapOutputDataRequest.ProtoReflect.Descriptor instead.
func (*BatchSwapOutputDataRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{29}
}

func (x *BatchSwapOutputDataRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BatchSwapOutputDataRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BatchSwapOutputDataRequest) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

type BatchSwapOutputDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *BatchSwapOutputData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchSwapOutputDataResponse) Reset() {
	*x = BatchSwapOutputDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSwapOutputDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSwapOutputDataResponse) ProtoMessage() {}

func (x *BatchSwapOutputDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSwapOutputDataResponse.ProtoReflect.Descriptor instead.
func (*BatchSwapOutputDataResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{30}
}

func (x *BatchSwapOutputDataResponse) GetData() *BatchSwapOutputData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwapExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId     string               `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height      uint64               `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TradingPair *DirectedTradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (x *SwapExecutionRequest) Reset() {
	*x = SwapExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapExecutionRequest) ProtoMessage() {}

func (x *SwapExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapExecutionRequest.ProtoReflect.Descriptor instead.
func (*SwapExecutionRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{31}
}

func (x *SwapExecutionRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SwapExecutionRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SwapExecutionRequest) GetTradingPair() *DirectedTradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

type SwapExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapExecution *SwapExecution `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
}

func (x *SwapExecutionResponse) Reset() {
	*x = SwapExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapExecutionResponse) ProtoMessage() {}

func (x *SwapExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapExecutionResponse.ProtoReflect.Descriptor instead.
func (*SwapExecutionResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{32}
}

func (x *SwapExecutionResponse) GetSwapExecution() *SwapExecution {
	if x != nil {
		return x.SwapExecution
	}
	return nil
}

type ArbExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ArbExecutionRequest) Reset() {
	*x = ArbExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbExecutionRequest) ProtoMessage() {}

func (x *ArbExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbExecutionRequest.ProtoReflect.Descriptor instead.
func (*ArbExecutionRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{33}
}

func (x *ArbExecutionRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ArbExecutionRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ArbExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapExecution *SwapExecution `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
	Height        uint64         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ArbExecutionResponse) Reset() {
	*x = ArbExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbExecutionResponse) ProtoMessage() {}

func (x *ArbExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbExecutionResponse.ProtoReflect.Descriptor instead.
func (*ArbExecutionResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{34}
}

func (x *ArbExecutionResponse) GetSwapExecution() *SwapExecution {
	if x != nil {
		return x.SwapExecution
	}
	return nil
}

func (x *ArbExecutionResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SwapExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If present, only return swap executions occurring after the given height.
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// If present, only return swap executions occurring before the given height.
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	// If present, filter swap executions by the given trading pair.
	TradingPair *DirectedTradingPair `protobuf:"bytes,4,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (x *SwapExecutionsRequest) Reset() {
	*x = SwapExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapExecutionsRequest) ProtoMessage() {}

func (x *SwapExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapExecutionsRequest.ProtoReflect.Descriptor instead.
func (*SwapExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{35}
}

func (x *SwapExecutionsRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SwapExecutionsRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *SwapExecutionsRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *SwapExecutionsRequest) GetTradingPair() *DirectedTradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

type SwapExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapExecution *SwapExecution       `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
	Height        uint64               `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	TradingPair   *DirectedTradingPair `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (x *SwapExecutionsResponse) Reset() {
	*x = SwapExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapExecutionsResponse) ProtoMessage() {}

func (x *SwapExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapExecutionsResponse.ProtoReflect.Descriptor instead.
func (*SwapExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{36}
}

func (x *SwapExecutionsResponse) GetSwapExecution() *SwapExecution {
	if x != nil {
		return x.SwapExecution
	}
	return nil
}

func (x *SwapExecutionsResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SwapExecutionsResponse) GetTradingPair() *DirectedTradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

type ArbExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If present, only return arb executions occurring after the given height.
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// If present, only return arb executions occurring before the given height.
	EndHeight uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (x *ArbExecutionsRequest) Reset() {
	*x = ArbExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbExecutionsRequest) ProtoMessage() {}

func (x *ArbExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ArbExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{37}
}

func (x *ArbExecutionsRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ArbExecutionsRequest) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *ArbExecutionsRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

type ArbExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapExecution *SwapExecution `protobuf:"bytes,1,opt,name=swap_execution,json=swapExecution,proto3" json:"swap_execution,omitempty"`
	Height        uint64         `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ArbExecutionsResponse) Reset() {
	*x = ArbExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbExecutionsResponse) ProtoMessage() {}

func (x *ArbExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ArbExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{38}
}

func (x *ArbExecutionsResponse) GetSwapExecution() *SwapExecution {
	if x != nil {
		return x.SwapExecution
	}
	return nil
}

func (x *ArbExecutionsResponse) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type LiquidityPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// If true, include closed and withdrawn positions.
	IncludeClosed bool `protobuf:"varint,4,opt,name=include_closed,json=includeClosed,proto3" json:"include_closed,omitempty"`
}

func (x *LiquidityPositionsRequest) Reset() {
	*x = LiquidityPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionsRequest) ProtoMessage() {}

func (x *LiquidityPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionsRequest.ProtoReflect.Descriptor instead.
func (*LiquidityPositionsRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{39}
}

func (x *LiquidityPositionsRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LiquidityPositionsRequest) GetIncludeClosed() bool {
	if x != nil {
		return x.IncludeClosed
	}
	return false
}

type LiquidityPositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LiquidityPositionsResponse) Reset() {
	*x = LiquidityPositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionsResponse) ProtoMessage() {}

func (x *LiquidityPositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionsResponse.ProtoReflect.Descriptor instead.
func (*LiquidityPositionsResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{40}
}

func (x *LiquidityPositionsResponse) GetData() *Position {
	if x != nil {
		return x.Data
	}
	return nil
}

type LiquidityPositionByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId    string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PositionId *PositionId `protobuf:"bytes,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *LiquidityPositionByIdRequest) Reset() {
	*x = LiquidityPositionByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionByIdRequest) ProtoMessage() {}

func (x *LiquidityPositionByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionByIdRequest.ProtoReflect.Descriptor instead.
func (*LiquidityPositionByIdRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{41}
}

func (x *LiquidityPositionByIdRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LiquidityPositionByIdRequest) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

type LiquidityPositionByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LiquidityPositionByIdResponse) Reset() {
	*x = LiquidityPositionByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionByIdResponse) ProtoMessage() {}

func (x *LiquidityPositionByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionByIdResponse.ProtoReflect.Descriptor instead.
func (*LiquidityPositionByIdResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{42}
}

func (x *LiquidityPositionByIdResponse) GetData() *Position {
	if x != nil {
		return x.Data
	}
	return nil
}

type LiquidityPositionsByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId    string        `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PositionId []*PositionId `protobuf:"bytes,2,rep,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *LiquidityPositionsByIdRequest) Reset() {
	*x = LiquidityPositionsByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionsByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionsByIdRequest) ProtoMessage() {}

func (x *LiquidityPositionsByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionsByIdRequest.ProtoReflect.Descriptor instead.
func (*LiquidityPositionsByIdRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{43}
}

func (x *LiquidityPositionsByIdRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LiquidityPositionsByIdRequest) GetPositionId() []*PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

type LiquidityPositionsByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LiquidityPositionsByIdResponse) Reset() {
	*x = LiquidityPositionsByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionsByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionsByIdResponse) ProtoMessage() {}

func (x *LiquidityPositionsByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionsByIdResponse.ProtoReflect.Descriptor instead.
func (*LiquidityPositionsByIdResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{44}
}

func (x *LiquidityPositionsByIdResponse) GetData() *Position {
	if x != nil {
		return x.Data
	}
	return nil
}

type LiquidityPositionsByPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The directed trading pair to request positions for
	TradingPair *DirectedTradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The maximum number of positions to return.
	Limit uint64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *LiquidityPositionsByPriceRequest) Reset() {
	*x = LiquidityPositionsByPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionsByPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionsByPriceRequest) ProtoMessage() {}

func (x *LiquidityPositionsByPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionsByPriceRequest.ProtoReflect.Descriptor instead.
func (*LiquidityPositionsByPriceRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{45}
}

func (x *LiquidityPositionsByPriceRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LiquidityPositionsByPriceRequest) GetTradingPair() *DirectedTradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *LiquidityPositionsByPriceRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type LiquidityPositionsByPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Position `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LiquidityPositionsByPriceResponse) Reset() {
	*x = LiquidityPositionsByPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiquidityPositionsByPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiquidityPositionsByPriceResponse) ProtoMessage() {}

func (x *LiquidityPositionsByPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiquidityPositionsByPriceResponse.ProtoReflect.Descriptor instead.
func (*LiquidityPositionsByPriceResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{46}
}

func (x *LiquidityPositionsByPriceResponse) GetData() *Position {
	if x != nil {
		return x.Data
	}
	return nil
}

type SpreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The expected chain id (empty string if no expectation).
	ChainId     string       `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TradingPair *TradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
}

func (x *SpreadRequest) Reset() {
	*x = SpreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadRequest) ProtoMessage() {}

func (x *SpreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadRequest.ProtoReflect.Descriptor instead.
func (*SpreadRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{47}
}

func (x *SpreadRequest) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *SpreadRequest) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

type SpreadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The best position when trading 1 => 2.
	Best_1To_2Position *Position `protobuf:"bytes,1,opt,name=best_1_to_2_position,json=best1To2Position,proto3" json:"best_1_to_2_position,omitempty"`
	// The best position when trading 2 => 1.
	Best_2To_1Position *Position `protobuf:"bytes,2,opt,name=best_2_to_1_position,json=best2To1Position,proto3" json:"best_2_to_1_position,omitempty"`
	// An approximation of the effective price when trading 1 => 2.
	ApproxEffectivePrice_1To_2 float64 `protobuf:"fixed64,3,opt,name=approx_effective_price_1_to_2,json=approxEffectivePrice1To2,proto3" json:"approx_effective_price_1_to_2,omitempty"`
	// An approximation of the effective price when trading 2 => 1.
	ApproxEffectivePrice_2To_1 float64 `protobuf:"fixed64,4,opt,name=approx_effective_price_2_to_1,json=approxEffectivePrice2To1,proto3" json:"approx_effective_price_2_to_1,omitempty"`
}

func (x *SpreadResponse) Reset() {
	*x = SpreadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpreadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpreadResponse) ProtoMessage() {}

func (x *SpreadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpreadResponse.ProtoReflect.Descriptor instead.
func (*SpreadResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{48}
}

func (x *SpreadResponse) GetBest_1To_2Position() *Position {
	if x != nil {
		return x.Best_1To_2Position
	}
	return nil
}

func (x *SpreadResponse) GetBest_2To_1Position() *Position {
	if x != nil {
		return x.Best_2To_1Position
	}
	return nil
}

func (x *SpreadResponse) GetApproxEffectivePrice_1To_2() float64 {
	if x != nil {
		return x.ApproxEffectivePrice_1To_2
	}
	return 0
}

func (x *SpreadResponse) GetApproxEffectivePrice_2To_1() float64 {
	if x != nil {
		return x.ApproxEffectivePrice_2To_1
	}
	return 0
}

type SimulateTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input   *v1alpha14.Value              `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output  *v1alpha14.AssetId            `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Routing *SimulateTradeRequest_Routing `protobuf:"bytes,3,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (x *SimulateTradeRequest) Reset() {
	*x = SimulateTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeRequest) ProtoMessage() {}

func (x *SimulateTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeRequest.ProtoReflect.Descriptor instead.
func (*SimulateTradeRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{49}
}

func (x *SimulateTradeRequest) GetInput() *v1alpha14.Value {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *SimulateTradeRequest) GetOutput() *v1alpha14.AssetId {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *SimulateTradeRequest) GetRouting() *SimulateTradeRequest_Routing {
	if x != nil {
		return x.Routing
	}
	return nil
}

type SimulateTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *SwapExecution `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SimulateTradeResponse) Reset() {
	*x = SimulateTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeResponse) ProtoMessage() {}

func (x *SimulateTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeResponse.ProtoReflect.Descriptor instead.
func (*SimulateTradeResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{50}
}

func (x *SimulateTradeResponse) GetOutput() *SwapExecution {
	if x != nil {
		return x.Output
	}
	return nil
}

type EventSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The amount for asset 1.
	Delta_1I *v1alpha13.Amount `protobuf:"bytes,2,opt,name=delta_1_i,json=delta1I,proto3" json:"delta_1_i,omitempty"`
	// The amount for asset 2.
	Delta_2I *v1alpha13.Amount `protobuf:"bytes,3,opt,name=delta_2_i,json=delta2I,proto3" json:"delta_2_i,omitempty"`
	// The swap commitment.
	SwapCommitment *v1alpha12.StateCommitment `protobuf:"bytes,4,opt,name=swap_commitment,json=swapCommitment,proto3" json:"swap_commitment,omitempty"`
}

func (x *EventSwap) Reset() {
	*x = EventSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSwap) ProtoMessage() {}

func (x *EventSwap) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSwap.ProtoReflect.Descriptor instead.
func (*EventSwap) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{51}
}

func (x *EventSwap) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *EventSwap) GetDelta_1I() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_1I
	}
	return nil
}

func (x *EventSwap) GetDelta_2I() *v1alpha13.Amount {
	if x != nil {
		return x.Delta_2I
	}
	return nil
}

func (x *EventSwap) GetSwapCommitment() *v1alpha12.StateCommitment {
	if x != nil {
		return x.SwapCommitment
	}
	return nil
}

type EventSwapClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair that is subject of the swap claim.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// Note commitment for the first asset.
	Output_1Commitment *v1alpha12.StateCommitment `protobuf:"bytes,2,opt,name=output_1_commitment,json=output1Commitment,proto3" json:"output_1_commitment,omitempty"`
	// Note commitment for the second asset.
	Output_2Commitment *v1alpha12.StateCommitment `protobuf:"bytes,3,opt,name=output_2_commitment,json=output2Commitment,proto3" json:"output_2_commitment,omitempty"`
	// The nullifier for the swap commitment.
	Nullifier *v1alpha1.Nullifier `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
}

func (x *EventSwapClaim) Reset() {
	*x = EventSwapClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSwapClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSwapClaim) ProtoMessage() {}

func (x *EventSwapClaim) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSwapClaim.ProtoReflect.Descriptor instead.
func (*EventSwapClaim) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{52}
}

func (x *EventSwapClaim) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *EventSwapClaim) GetOutput_1Commitment() *v1alpha12.StateCommitment {
	if x != nil {
		return x.Output_1Commitment
	}
	return nil
}

func (x *EventSwapClaim) GetOutput_2Commitment() *v1alpha12.StateCommitment {
	if x != nil {
		return x.Output_2Commitment
	}
	return nil
}

func (x *EventSwapClaim) GetNullifier() *v1alpha1.Nullifier {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

type EventPositionOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position ID.
	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// The trading pair to open.
	TradingPair *TradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The amount for asset 1.
	Reserves_1 *v1alpha13.Amount `protobuf:"bytes,3,opt,name=reserves_1,json=reserves1,proto3" json:"reserves_1,omitempty"`
	// The amount for asset 2.
	Reserves_2 *v1alpha13.Amount `protobuf:"bytes,4,opt,name=reserves_2,json=reserves2,proto3" json:"reserves_2,omitempty"`
	// The trading fee for the position, expressed in basis points.
	// e.g. 2% fee is expressed as 200, 100% fee is expressed as 10000;
	TradingFee uint32 `protobuf:"varint,5,opt,name=trading_fee,json=tradingFee,proto3" json:"trading_fee,omitempty"`
}

func (x *EventPositionOpen) Reset() {
	*x = EventPositionOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPositionOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPositionOpen) ProtoMessage() {}

func (x *EventPositionOpen) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPositionOpen.ProtoReflect.Descriptor instead.
func (*EventPositionOpen) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{53}
}

func (x *EventPositionOpen) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *EventPositionOpen) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *EventPositionOpen) GetReserves_1() *v1alpha13.Amount {
	if x != nil {
		return x.Reserves_1
	}
	return nil
}

func (x *EventPositionOpen) GetReserves_2() *v1alpha13.Amount {
	if x != nil {
		return x.Reserves_2
	}
	return nil
}

func (x *EventPositionOpen) GetTradingFee() uint32 {
	if x != nil {
		return x.TradingFee
	}
	return 0
}

type EventPositionClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the closed position
	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (x *EventPositionClose) Reset() {
	*x = EventPositionClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPositionClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPositionClose) ProtoMessage() {}

func (x *EventPositionClose) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPositionClose.ProtoReflect.Descriptor instead.
func (*EventPositionClose) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{54}
}

func (x *EventPositionClose) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

type EventPositionWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the withdrawn position.
	PositionId *PositionId `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	// The trading pair of the withdrawn position.
	TradingPair *TradingPair `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// The reserves of asset 1 of the withdrawn position.
	Reserves_1 *v1alpha13.Amount `protobuf:"bytes,3,opt,name=reserves_1,json=reserves1,proto3" json:"reserves_1,omitempty"`
	// The reserves of asset 2 of the withdrawn position.
	Reserves_2 *v1alpha13.Amount `protobuf:"bytes,4,opt,name=reserves_2,json=reserves2,proto3" json:"reserves_2,omitempty"`
}

func (x *EventPositionWithdraw) Reset() {
	*x = EventPositionWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPositionWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPositionWithdraw) ProtoMessage() {}

func (x *EventPositionWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPositionWithdraw.ProtoReflect.Descriptor instead.
func (*EventPositionWithdraw) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{55}
}

func (x *EventPositionWithdraw) GetPositionId() *PositionId {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *EventPositionWithdraw) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *EventPositionWithdraw) GetReserves_1() *v1alpha13.Amount {
	if x != nil {
		return x.Reserves_1
	}
	return nil
}

func (x *EventPositionWithdraw) GetReserves_2() *v1alpha13.Amount {
	if x != nil {
		return x.Reserves_2
	}
	return nil
}

type SwapView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swap          *Swap          `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
	SwapPlaintext *SwapPlaintext `protobuf:"bytes,3,opt,name=swap_plaintext,json=swapPlaintext,proto3" json:"swap_plaintext,omitempty"`
}

func (x *SwapView_Visible) Reset() {
	*x = SwapView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapView_Visible) ProtoMessage() {}

func (x *SwapView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapView_Visible.ProtoReflect.Descriptor instead.
func (*SwapView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{10, 0}
}

func (x *SwapView_Visible) GetSwap() *Swap {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *SwapView_Visible) GetSwapPlaintext() *SwapPlaintext {
	if x != nil {
		return x.SwapPlaintext
	}
	return nil
}

type SwapView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Swap *Swap `protobuf:"bytes,1,opt,name=swap,proto3" json:"swap,omitempty"`
}

func (x *SwapView_Opaque) Reset() {
	*x = SwapView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapView_Opaque) ProtoMessage() {}

func (x *SwapView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapView_Opaque.ProtoReflect.Descriptor instead.
func (*SwapView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{10, 1}
}

func (x *SwapView_Opaque) GetSwap() *Swap {
	if x != nil {
		return x.Swap
	}
	return nil
}

type SwapClaimView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapClaim *SwapClaim          `protobuf:"bytes,1,opt,name=swap_claim,json=swapClaim,proto3" json:"swap_claim,omitempty"`
	Output_1  *v1alpha16.NoteView `protobuf:"bytes,2,opt,name=output_1,json=output1,proto3" json:"output_1,omitempty"`
	Output_2  *v1alpha16.NoteView `protobuf:"bytes,3,opt,name=output_2,json=output2,proto3" json:"output_2,omitempty"`
}

func (x *SwapClaimView_Visible) Reset() {
	*x = SwapClaimView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimView_Visible) ProtoMessage() {}

func (x *SwapClaimView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimView_Visible.ProtoReflect.Descriptor instead.
func (*SwapClaimView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SwapClaimView_Visible) GetSwapClaim() *SwapClaim {
	if x != nil {
		return x.SwapClaim
	}
	return nil
}

func (x *SwapClaimView_Visible) GetOutput_1() *v1alpha16.NoteView {
	if x != nil {
		return x.Output_1
	}
	return nil
}

func (x *SwapClaimView_Visible) GetOutput_2() *v1alpha16.NoteView {
	if x != nil {
		return x.Output_2
	}
	return nil
}

type SwapClaimView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapClaim *SwapClaim `protobuf:"bytes,1,opt,name=swap_claim,json=swapClaim,proto3" json:"swap_claim,omitempty"`
}

func (x *SwapClaimView_Opaque) Reset() {
	*x = SwapClaimView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimView_Opaque) ProtoMessage() {}

func (x *SwapClaimView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimView_Opaque.ProtoReflect.Descriptor instead.
func (*SwapClaimView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{11, 1}
}

func (x *SwapClaimView_Opaque) GetSwapClaim() *SwapClaim {
	if x != nil {
		return x.SwapClaim
	}
	return nil
}

// Contains all individual steps consisting of a trade trace.
type SwapExecution_Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each step in the trade trace.
	Value []*v1alpha14.Value `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *SwapExecution_Trace) Reset() {
	*x = SwapExecution_Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapExecution_Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapExecution_Trace) ProtoMessage() {}

func (x *SwapExecution_Trace) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapExecution_Trace.ProtoReflect.Descriptor instead.
func (*SwapExecution_Trace) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{26, 0}
}

func (x *SwapExecution_Trace) GetValue() []*v1alpha14.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type SimulateTradeRequest_Routing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Setting:
	//
	//	*SimulateTradeRequest_Routing_Default_
	//	*SimulateTradeRequest_Routing_SingleHop_
	Setting isSimulateTradeRequest_Routing_Setting `protobuf_oneof:"setting"`
}

func (x *SimulateTradeRequest_Routing) Reset() {
	*x = SimulateTradeRequest_Routing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeRequest_Routing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeRequest_Routing) ProtoMessage() {}

func (x *SimulateTradeRequest_Routing) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeRequest_Routing.ProtoReflect.Descriptor instead.
func (*SimulateTradeRequest_Routing) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{49, 0}
}

func (m *SimulateTradeRequest_Routing) GetSetting() isSimulateTradeRequest_Routing_Setting {
	if m != nil {
		return m.Setting
	}
	return nil
}

func (x *SimulateTradeRequest_Routing) GetDefault() *SimulateTradeRequest_Routing_Default {
	if x, ok := x.GetSetting().(*SimulateTradeRequest_Routing_Default_); ok {
		return x.Default
	}
	return nil
}

func (x *SimulateTradeRequest_Routing) GetSingleHop() *SimulateTradeRequest_Routing_SingleHop {
	if x, ok := x.GetSetting().(*SimulateTradeRequest_Routing_SingleHop_); ok {
		return x.SingleHop
	}
	return nil
}

type isSimulateTradeRequest_Routing_Setting interface {
	isSimulateTradeRequest_Routing_Setting()
}

type SimulateTradeRequest_Routing_Default_ struct {
	Default *SimulateTradeRequest_Routing_Default `protobuf:"bytes,1,opt,name=default,proto3,oneof"`
}

type SimulateTradeRequest_Routing_SingleHop_ struct {
	SingleHop *SimulateTradeRequest_Routing_SingleHop `protobuf:"bytes,2,opt,name=single_hop,json=singleHop,proto3,oneof"`
}

func (*SimulateTradeRequest_Routing_Default_) isSimulateTradeRequest_Routing_Setting() {}

func (*SimulateTradeRequest_Routing_SingleHop_) isSimulateTradeRequest_Routing_Setting() {}

type SimulateTradeRequest_Routing_SingleHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SimulateTradeRequest_Routing_SingleHop) Reset() {
	*x = SimulateTradeRequest_Routing_SingleHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeRequest_Routing_SingleHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeRequest_Routing_SingleHop) ProtoMessage() {}

func (x *SimulateTradeRequest_Routing_SingleHop) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeRequest_Routing_SingleHop.ProtoReflect.Descriptor instead.
func (*SimulateTradeRequest_Routing_SingleHop) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{49, 0, 0}
}

type SimulateTradeRequest_Routing_Default struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SimulateTradeRequest_Routing_Default) Reset() {
	*x = SimulateTradeRequest_Routing_Default{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulateTradeRequest_Routing_Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulateTradeRequest_Routing_Default) ProtoMessage() {}

func (x *SimulateTradeRequest_Routing_Default) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulateTradeRequest_Routing_Default.ProtoReflect.Descriptor instead.
func (*SimulateTradeRequest_Routing_Default) Descriptor() ([]byte, []int) {
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP(), []int{49, 0, 1}
}

var File_penumbra_core_component_dex_v1alpha1_dex_proto protoreflect.FileDescriptor

var file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x24, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x28, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x63, 0x74, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x42, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6e, 0x75, 0x6d, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x74, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x74, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0b, 0x5a, 0x4b,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x28, 0x0a, 0x10, 0x5a, 0x4b, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x04, 0x53, 0x77,
	0x61, 0x70, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x4b, 0x53, 0x77, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0xc9, 0x01, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4c, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x5a, 0x4b, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x47, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x03, 0x0a, 0x0d,
	0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4d, 0x0a,
	0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x31, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x31, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x32, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x85, 0x03, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x31, 0x5f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x31, 0x49, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x32, 0x5f, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x32, 0x49, 0x12, 0x56, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x66, 0x65, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x0b,
	0x53, 0x77, 0x61, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x77, 0x61,
	0x70, 0x22, 0x8e, 0x03, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x31, 0x5f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x49, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x32, 0x5f, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x49, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x65,
	0x65, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72, 0x73, 0x65,
	0x65, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x5a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x77,
	0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x65, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x22, 0xde, 0x02, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77,
	0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x22, 0xae, 0x03, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x56, 0x69, 0x65, 0x77,
	0x12, 0x52, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x56, 0x69, 0x65,
	0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x56, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x52, 0x04, 0x73, 0x77, 0x61,
	0x70, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d,
	0x73, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x48, 0x0a,
	0x06, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61,
	0x70, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x22, 0xb1, 0x04, 0x0a, 0x0d, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x12, 0x57, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x54, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x56, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x83, 0x02, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61,
	0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x12, 0x53, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x31, 0x12, 0x53, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x1a, 0x58, 0x0a, 0x06, 0x4f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x31, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x32, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb5, 0x04, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x31, 0x12, 0x3b, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x32, 0x12, 0x3d, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07,
	0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x31, 0x12, 0x3d, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x6c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x32, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x31, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x6e, 0x66,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x09, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x72,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x70,
	0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x01,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x01, 0x70, 0x12, 0x30,
	0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x01, 0x71,
	0x22, 0x72, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x02,
	0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x02, 0x72, 0x31,
	0x12, 0x32, 0x0a, 0x02, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x02, 0x72, 0x32, 0x22, 0xa4, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x47, 0x0a, 0x03, 0x70, 0x68, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x68, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x6e, 0x46, 0x69, 0x6c, 0x6c, 0x22, 0x43, 0x0a, 0x0a, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x42, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d,
	0x22, 0xab, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xbc, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x55,
	0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x22, 0xa5,
	0x01, 0x0a, 0x05, 0x4c, 0x70, 0x4e, 0x66, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5a, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x51, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x0d,
	0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x42, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x01, 0x0a,
	0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x22, 0x65, 0x0a, 0x17, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x22, 0x6c, 0x0a, 0x1b, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x53, 0x77, 0x61,
	0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x69, 0x72, 0x22, 0x73, 0x0a, 0x15, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x13, 0x41, 0x72, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd2,
	0x01, 0x0a, 0x15, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x69, 0x72, 0x22, 0xea, 0x01, 0x0a, 0x16, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x77, 0x61,
	0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x22, 0x73, 0x0a, 0x14, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5a, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x77,
	0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1d, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1e, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb1,
	0x01, 0x0a, 0x20, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x5c,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x67, 0x0a, 0x21, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x0d,
	0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x22, 0xd2,
	0x02, 0x0a, 0x0e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x14, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x31, 0x5f, 0x74, 0x6f, 0x5f, 0x32,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x62, 0x65, 0x73, 0x74, 0x31, 0x54, 0x6f, 0x32, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x14, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x31,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x62, 0x65, 0x73, 0x74, 0x32, 0x54, 0x6f, 0x31, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x31, 0x5f, 0x74, 0x6f,
	0x5f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x54,
	0x6f, 0x32, 0x12, 0x3f, 0x0a, 0x1d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x32, 0x5f, 0x74,
	0x6f, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x54, 0x6f, 0x31, 0x22, 0xf4, 0x03, 0x0a, 0x14, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x5c, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x1a, 0x83, 0x02, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x66, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x48, 0x6f, 0x70, 0x1a, 0x0b, 0x0a, 0x09, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x48, 0x6f, 0x70, 0x1a, 0x09, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x64, 0x0a, 0x15, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xb9, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x12, 0x54,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x31, 0x5f,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x31, 0x49, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x32, 0x5f,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x32, 0x49, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x77,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf3, 0x02, 0x0a,
	0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x54, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x5d, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x31, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x32,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x73, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xe3, 0x02, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x31, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x22, 0x67, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xc6, 0x02, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x51, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x31, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6e, 0x75, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x32, 0x32, 0xe8, 0x0b, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x13,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x53, 0x77, 0x61,
	0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77,
	0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x62, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0e,
	0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x0d,
	0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x72, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0xa0, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x42,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x43, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0xae, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x46, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x71,
	0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x73, 0x0a, 0x06, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x33, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x01, 0x0a, 0x11, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0d,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3a, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xca, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x42, 0x08, 0x44, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x64, 0x65, 0x78, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xa2, 0x02, 0x04, 0x50, 0x43, 0x43, 0x44, 0xaa, 0x02, 0x24, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x44, 0x65, 0x78, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02,
	0x24, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5c, 0x44, 0x65, 0x78, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x30, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5c,
	0x44, 0x65, 0x78, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x28, 0x50, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x44, 0x65, 0x78, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescOnce sync.Once
	file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescData = file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDesc
)

func file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescGZIP() []byte {
	file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescOnce.Do(func() {
		file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescData)
	})
	return file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDescData
}

var file_penumbra_core_component_dex_v1alpha1_dex_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_penumbra_core_component_dex_v1alpha1_dex_proto_goTypes = []interface{}{
	(PositionState_PositionStateEnum)(0),           // 0: penumbra.core.component.dex.v1alpha1.PositionState.PositionStateEnum
	(*ZKSwapProof)(nil),                            // 1: penumbra.core.component.dex.v1alpha1.ZKSwapProof
	(*ZKSwapClaimProof)(nil),                       // 2: penumbra.core.component.dex.v1alpha1.ZKSwapClaimProof
	(*Swap)(nil),                                   // 3: penumbra.core.component.dex.v1alpha1.Swap
	(*SwapClaim)(nil),                              // 4: penumbra.core.component.dex.v1alpha1.SwapClaim
	(*SwapClaimBody)(nil),                          // 5: penumbra.core.component.dex.v1alpha1.SwapClaimBody
	(*SwapBody)(nil),                               // 6: penumbra.core.component.dex.v1alpha1.SwapBody
	(*SwapPayload)(nil),                            // 7: penumbra.core.component.dex.v1alpha1.SwapPayload
	(*SwapPlaintext)(nil),                          // 8: penumbra.core.component.dex.v1alpha1.SwapPlaintext
	(*SwapPlan)(nil),                               // 9: penumbra.core.component.dex.v1alpha1.SwapPlan
	(*SwapClaimPlan)(nil),                          // 10: penumbra.core.component.dex.v1alpha1.SwapClaimPlan
	(*SwapView)(nil),                               // 11: penumbra.core.component.dex.v1alpha1.SwapView
	(*SwapClaimView)(nil),                          // 12: penumbra.core.component.dex.v1alpha1.SwapClaimView
	(*TradingPair)(nil),                            // 13: penumbra.core.component.dex.v1alpha1.TradingPair
	(*DirectedTradingPair)(nil),                    // 14: penumbra.core.component.dex.v1alpha1.DirectedTradingPair
	(*BatchSwapOutputData)(nil),                    // 15: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData
	(*TradingFunction)(nil),                        // 16: penumbra.core.component.dex.v1alpha1.TradingFunction
	(*BareTradingFunction)(nil),                    // 17: penumbra.core.component.dex.v1alpha1.BareTradingFunction
	(*Reserves)(nil),                               // 18: penumbra.core.component.dex.v1alpha1.Reserves
	(*Position)(nil),                               // 19: penumbra.core.component.dex.v1alpha1.Position
	(*PositionId)(nil),                             // 20: penumbra.core.component.dex.v1alpha1.PositionId
	(*PositionState)(nil),                          // 21: penumbra.core.component.dex.v1alpha1.PositionState
	(*LpNft)(nil),                                  // 22: penumbra.core.component.dex.v1alpha1.LpNft
	(*PositionOpen)(nil),                           // 23: penumbra.core.component.dex.v1alpha1.PositionOpen
	(*PositionClose)(nil),                          // 24: penumbra.core.component.dex.v1alpha1.PositionClose
	(*PositionWithdraw)(nil),                       // 25: penumbra.core.component.dex.v1alpha1.PositionWithdraw
	(*PositionRewardClaim)(nil),                    // 26: penumbra.core.component.dex.v1alpha1.PositionRewardClaim
	(*SwapExecution)(nil),                          // 27: penumbra.core.component.dex.v1alpha1.SwapExecution
	(*PositionWithdrawPlan)(nil),                   // 28: penumbra.core.component.dex.v1alpha1.PositionWithdrawPlan
	(*PositionRewardClaimPlan)(nil),                // 29: penumbra.core.component.dex.v1alpha1.PositionRewardClaimPlan
	(*BatchSwapOutputDataRequest)(nil),             // 30: penumbra.core.component.dex.v1alpha1.BatchSwapOutputDataRequest
	(*BatchSwapOutputDataResponse)(nil),            // 31: penumbra.core.component.dex.v1alpha1.BatchSwapOutputDataResponse
	(*SwapExecutionRequest)(nil),                   // 32: penumbra.core.component.dex.v1alpha1.SwapExecutionRequest
	(*SwapExecutionResponse)(nil),                  // 33: penumbra.core.component.dex.v1alpha1.SwapExecutionResponse
	(*ArbExecutionRequest)(nil),                    // 34: penumbra.core.component.dex.v1alpha1.ArbExecutionRequest
	(*ArbExecutionResponse)(nil),                   // 35: penumbra.core.component.dex.v1alpha1.ArbExecutionResponse
	(*SwapExecutionsRequest)(nil),                  // 36: penumbra.core.component.dex.v1alpha1.SwapExecutionsRequest
	(*SwapExecutionsResponse)(nil),                 // 37: penumbra.core.component.dex.v1alpha1.SwapExecutionsResponse
	(*ArbExecutionsRequest)(nil),                   // 38: penumbra.core.component.dex.v1alpha1.ArbExecutionsRequest
	(*ArbExecutionsResponse)(nil),                  // 39: penumbra.core.component.dex.v1alpha1.ArbExecutionsResponse
	(*LiquidityPositionsRequest)(nil),              // 40: penumbra.core.component.dex.v1alpha1.LiquidityPositionsRequest
	(*LiquidityPositionsResponse)(nil),             // 41: penumbra.core.component.dex.v1alpha1.LiquidityPositionsResponse
	(*LiquidityPositionByIdRequest)(nil),           // 42: penumbra.core.component.dex.v1alpha1.LiquidityPositionByIdRequest
	(*LiquidityPositionByIdResponse)(nil),          // 43: penumbra.core.component.dex.v1alpha1.LiquidityPositionByIdResponse
	(*LiquidityPositionsByIdRequest)(nil),          // 44: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByIdRequest
	(*LiquidityPositionsByIdResponse)(nil),         // 45: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByIdResponse
	(*LiquidityPositionsByPriceRequest)(nil),       // 46: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByPriceRequest
	(*LiquidityPositionsByPriceResponse)(nil),      // 47: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByPriceResponse
	(*SpreadRequest)(nil),                          // 48: penumbra.core.component.dex.v1alpha1.SpreadRequest
	(*SpreadResponse)(nil),                         // 49: penumbra.core.component.dex.v1alpha1.SpreadResponse
	(*SimulateTradeRequest)(nil),                   // 50: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest
	(*SimulateTradeResponse)(nil),                  // 51: penumbra.core.component.dex.v1alpha1.SimulateTradeResponse
	(*EventSwap)(nil),                              // 52: penumbra.core.component.dex.v1alpha1.EventSwap
	(*EventSwapClaim)(nil),                         // 53: penumbra.core.component.dex.v1alpha1.EventSwapClaim
	(*EventPositionOpen)(nil),                      // 54: penumbra.core.component.dex.v1alpha1.EventPositionOpen
	(*EventPositionClose)(nil),                     // 55: penumbra.core.component.dex.v1alpha1.EventPositionClose
	(*EventPositionWithdraw)(nil),                  // 56: penumbra.core.component.dex.v1alpha1.EventPositionWithdraw
	(*SwapView_Visible)(nil),                       // 57: penumbra.core.component.dex.v1alpha1.SwapView.Visible
	(*SwapView_Opaque)(nil),                        // 58: penumbra.core.component.dex.v1alpha1.SwapView.Opaque
	(*SwapClaimView_Visible)(nil),                  // 59: penumbra.core.component.dex.v1alpha1.SwapClaimView.Visible
	(*SwapClaimView_Opaque)(nil),                   // 60: penumbra.core.component.dex.v1alpha1.SwapClaimView.Opaque
	(*SwapExecution_Trace)(nil),                    // 61: penumbra.core.component.dex.v1alpha1.SwapExecution.Trace
	(*SimulateTradeRequest_Routing)(nil),           // 62: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing
	(*SimulateTradeRequest_Routing_SingleHop)(nil), // 63: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing.SingleHop
	(*SimulateTradeRequest_Routing_Default)(nil),   // 64: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing.Default
	(*v1alpha1.Nullifier)(nil),                     // 65: penumbra.core.component.sct.v1alpha1.Nullifier
	(*v1alpha11.Fee)(nil),                          // 66: penumbra.core.component.fee.v1alpha1.Fee
	(*v1alpha12.StateCommitment)(nil),              // 67: penumbra.crypto.tct.v1alpha1.StateCommitment
	(*v1alpha13.Amount)(nil),                       // 68: penumbra.core.num.v1alpha1.Amount
	(*v1alpha14.BalanceCommitment)(nil),            // 69: penumbra.core.asset.v1alpha1.BalanceCommitment
	(*v1alpha15.Address)(nil),                      // 70: penumbra.core.keys.v1alpha1.Address
	(*v1alpha14.AssetId)(nil),                      // 71: penumbra.core.asset.v1alpha1.AssetId
	(*v1alpha14.Value)(nil),                        // 72: penumbra.core.asset.v1alpha1.Value
	(*v1alpha16.NoteView)(nil),                     // 73: penumbra.core.component.shielded_pool.v1alpha1.NoteView
}
var file_penumbra_core_component_dex_v1alpha1_dex_proto_depIdxs = []int32{
	1,   // 0: penumbra.core.component.dex.v1alpha1.Swap.proof:type_name -> penumbra.core.component.dex.v1alpha1.ZKSwapProof
	6,   // 1: penumbra.core.component.dex.v1alpha1.Swap.body:type_name -> penumbra.core.component.dex.v1alpha1.SwapBody
	2,   // 2: penumbra.core.component.dex.v1alpha1.SwapClaim.proof:type_name -> penumbra.core.component.dex.v1alpha1.ZKSwapClaimProof
	5,   // 3: penumbra.core.component.dex.v1alpha1.SwapClaim.body:type_name -> penumbra.core.component.dex.v1alpha1.SwapClaimBody
	65,  // 4: penumbra.core.component.dex.v1alpha1.SwapClaimBody.nullifier:type_name -> penumbra.core.component.sct.v1alpha1.Nullifier
	66,  // 5: penumbra.core.component.dex.v1alpha1.SwapClaimBody.fee:type_name -> penumbra.core.component.fee.v1alpha1.Fee
	67,  // 6: penumbra.core.component.dex.v1alpha1.SwapClaimBody.output_1_commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	67,  // 7: penumbra.core.component.dex.v1alpha1.SwapClaimBody.output_2_commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	15,  // 8: penumbra.core.component.dex.v1alpha1.SwapClaimBody.output_data:type_name -> penumbra.core.component.dex.v1alpha1.BatchSwapOutputData
	13,  // 9: penumbra.core.component.dex.v1alpha1.SwapBody.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	68,  // 10: penumbra.core.component.dex.v1alpha1.SwapBody.delta_1_i:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 11: penumbra.core.component.dex.v1alpha1.SwapBody.delta_2_i:type_name -> penumbra.core.num.v1alpha1.Amount
	69,  // 12: penumbra.core.component.dex.v1alpha1.SwapBody.fee_commitment:type_name -> penumbra.core.asset.v1alpha1.BalanceCommitment
	7,   // 13: penumbra.core.component.dex.v1alpha1.SwapBody.payload:type_name -> penumbra.core.component.dex.v1alpha1.SwapPayload
	67,  // 14: penumbra.core.component.dex.v1alpha1.SwapPayload.commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	13,  // 15: penumbra.core.component.dex.v1alpha1.SwapPlaintext.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	68,  // 16: penumbra.core.component.dex.v1alpha1.SwapPlaintext.delta_1_i:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 17: penumbra.core.component.dex.v1alpha1.SwapPlaintext.delta_2_i:type_name -> penumbra.core.num.v1alpha1.Amount
	66,  // 18: penumbra.core.component.dex.v1alpha1.SwapPlaintext.claim_fee:type_name -> penumbra.core.component.fee.v1alpha1.Fee
	70,  // 19: penumbra.core.component.dex.v1alpha1.SwapPlaintext.claim_address:type_name -> penumbra.core.keys.v1alpha1.Address
	8,   // 20: penumbra.core.component.dex.v1alpha1.SwapPlan.swap_plaintext:type_name -> penumbra.core.component.dex.v1alpha1.SwapPlaintext
	8,   // 21: penumbra.core.component.dex.v1alpha1.SwapClaimPlan.swap_plaintext:type_name -> penumbra.core.component.dex.v1alpha1.SwapPlaintext
	15,  // 22: penumbra.core.component.dex.v1alpha1.SwapClaimPlan.output_data:type_name -> penumbra.core.component.dex.v1alpha1.BatchSwapOutputData
	57,  // 23: penumbra.core.component.dex.v1alpha1.SwapView.visible:type_name -> penumbra.core.component.dex.v1alpha1.SwapView.Visible
	58,  // 24: penumbra.core.component.dex.v1alpha1.SwapView.opaque:type_name -> penumbra.core.component.dex.v1alpha1.SwapView.Opaque
	59,  // 25: penumbra.core.component.dex.v1alpha1.SwapClaimView.visible:type_name -> penumbra.core.component.dex.v1alpha1.SwapClaimView.Visible
	60,  // 26: penumbra.core.component.dex.v1alpha1.SwapClaimView.opaque:type_name -> penumbra.core.component.dex.v1alpha1.SwapClaimView.Opaque
	71,  // 27: penumbra.core.component.dex.v1alpha1.TradingPair.asset_1:type_name -> penumbra.core.asset.v1alpha1.AssetId
	71,  // 28: penumbra.core.component.dex.v1alpha1.TradingPair.asset_2:type_name -> penumbra.core.asset.v1alpha1.AssetId
	71,  // 29: penumbra.core.component.dex.v1alpha1.DirectedTradingPair.start:type_name -> penumbra.core.asset.v1alpha1.AssetId
	71,  // 30: penumbra.core.component.dex.v1alpha1.DirectedTradingPair.end:type_name -> penumbra.core.asset.v1alpha1.AssetId
	68,  // 31: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.delta_1:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 32: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.delta_2:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 33: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.lambda_1:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 34: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.lambda_2:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 35: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.unfilled_1:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 36: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.unfilled_2:type_name -> penumbra.core.num.v1alpha1.Amount
	13,  // 37: penumbra.core.component.dex.v1alpha1.BatchSwapOutputData.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	17,  // 38: penumbra.core.component.dex.v1alpha1.TradingFunction.component:type_name -> penumbra.core.component.dex.v1alpha1.BareTradingFunction
	13,  // 39: penumbra.core.component.dex.v1alpha1.TradingFunction.pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	68,  // 40: penumbra.core.component.dex.v1alpha1.BareTradingFunction.p:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 41: penumbra.core.component.dex.v1alpha1.BareTradingFunction.q:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 42: penumbra.core.component.dex.v1alpha1.Reserves.r1:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 43: penumbra.core.component.dex.v1alpha1.Reserves.r2:type_name -> penumbra.core.num.v1alpha1.Amount
	16,  // 44: penumbra.core.component.dex.v1alpha1.Position.phi:type_name -> penumbra.core.component.dex.v1alpha1.TradingFunction
	21,  // 45: penumbra.core.component.dex.v1alpha1.Position.state:type_name -> penumbra.core.component.dex.v1alpha1.PositionState
	18,  // 46: penumbra.core.component.dex.v1alpha1.Position.reserves:type_name -> penumbra.core.component.dex.v1alpha1.Reserves
	0,   // 47: penumbra.core.component.dex.v1alpha1.PositionState.state:type_name -> penumbra.core.component.dex.v1alpha1.PositionState.PositionStateEnum
	20,  // 48: penumbra.core.component.dex.v1alpha1.LpNft.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	21,  // 49: penumbra.core.component.dex.v1alpha1.LpNft.state:type_name -> penumbra.core.component.dex.v1alpha1.PositionState
	19,  // 50: penumbra.core.component.dex.v1alpha1.PositionOpen.position:type_name -> penumbra.core.component.dex.v1alpha1.Position
	20,  // 51: penumbra.core.component.dex.v1alpha1.PositionClose.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	20,  // 52: penumbra.core.component.dex.v1alpha1.PositionWithdraw.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	69,  // 53: penumbra.core.component.dex.v1alpha1.PositionWithdraw.reserves_commitment:type_name -> penumbra.core.asset.v1alpha1.BalanceCommitment
	20,  // 54: penumbra.core.component.dex.v1alpha1.PositionRewardClaim.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	69,  // 55: penumbra.core.component.dex.v1alpha1.PositionRewardClaim.rewards_commitment:type_name -> penumbra.core.asset.v1alpha1.BalanceCommitment
	61,  // 56: penumbra.core.component.dex.v1alpha1.SwapExecution.traces:type_name -> penumbra.core.component.dex.v1alpha1.SwapExecution.Trace
	72,  // 57: penumbra.core.component.dex.v1alpha1.SwapExecution.input:type_name -> penumbra.core.asset.v1alpha1.Value
	72,  // 58: penumbra.core.component.dex.v1alpha1.SwapExecution.output:type_name -> penumbra.core.asset.v1alpha1.Value
	18,  // 59: penumbra.core.component.dex.v1alpha1.PositionWithdrawPlan.reserves:type_name -> penumbra.core.component.dex.v1alpha1.Reserves
	20,  // 60: penumbra.core.component.dex.v1alpha1.PositionWithdrawPlan.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	13,  // 61: penumbra.core.component.dex.v1alpha1.PositionWithdrawPlan.pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	18,  // 62: penumbra.core.component.dex.v1alpha1.PositionRewardClaimPlan.reserves:type_name -> penumbra.core.component.dex.v1alpha1.Reserves
	13,  // 63: penumbra.core.component.dex.v1alpha1.BatchSwapOutputDataRequest.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	15,  // 64: penumbra.core.component.dex.v1alpha1.BatchSwapOutputDataResponse.data:type_name -> penumbra.core.component.dex.v1alpha1.BatchSwapOutputData
	14,  // 65: penumbra.core.component.dex.v1alpha1.SwapExecutionRequest.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.DirectedTradingPair
	27,  // 66: penumbra.core.component.dex.v1alpha1.SwapExecutionResponse.swap_execution:type_name -> penumbra.core.component.dex.v1alpha1.SwapExecution
	27,  // 67: penumbra.core.component.dex.v1alpha1.ArbExecutionResponse.swap_execution:type_name -> penumbra.core.component.dex.v1alpha1.SwapExecution
	14,  // 68: penumbra.core.component.dex.v1alpha1.SwapExecutionsRequest.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.DirectedTradingPair
	27,  // 69: penumbra.core.component.dex.v1alpha1.SwapExecutionsResponse.swap_execution:type_name -> penumbra.core.component.dex.v1alpha1.SwapExecution
	14,  // 70: penumbra.core.component.dex.v1alpha1.SwapExecutionsResponse.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.DirectedTradingPair
	27,  // 71: penumbra.core.component.dex.v1alpha1.ArbExecutionsResponse.swap_execution:type_name -> penumbra.core.component.dex.v1alpha1.SwapExecution
	19,  // 72: penumbra.core.component.dex.v1alpha1.LiquidityPositionsResponse.data:type_name -> penumbra.core.component.dex.v1alpha1.Position
	20,  // 73: penumbra.core.component.dex.v1alpha1.LiquidityPositionByIdRequest.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	19,  // 74: penumbra.core.component.dex.v1alpha1.LiquidityPositionByIdResponse.data:type_name -> penumbra.core.component.dex.v1alpha1.Position
	20,  // 75: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByIdRequest.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	19,  // 76: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByIdResponse.data:type_name -> penumbra.core.component.dex.v1alpha1.Position
	14,  // 77: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByPriceRequest.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.DirectedTradingPair
	19,  // 78: penumbra.core.component.dex.v1alpha1.LiquidityPositionsByPriceResponse.data:type_name -> penumbra.core.component.dex.v1alpha1.Position
	13,  // 79: penumbra.core.component.dex.v1alpha1.SpreadRequest.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	19,  // 80: penumbra.core.component.dex.v1alpha1.SpreadResponse.best_1_to_2_position:type_name -> penumbra.core.component.dex.v1alpha1.Position
	19,  // 81: penumbra.core.component.dex.v1alpha1.SpreadResponse.best_2_to_1_position:type_name -> penumbra.core.component.dex.v1alpha1.Position
	72,  // 82: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.input:type_name -> penumbra.core.asset.v1alpha1.Value
	71,  // 83: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.output:type_name -> penumbra.core.asset.v1alpha1.AssetId
	62,  // 84: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.routing:type_name -> penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing
	27,  // 85: penumbra.core.component.dex.v1alpha1.SimulateTradeResponse.output:type_name -> penumbra.core.component.dex.v1alpha1.SwapExecution
	13,  // 86: penumbra.core.component.dex.v1alpha1.EventSwap.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	68,  // 87: penumbra.core.component.dex.v1alpha1.EventSwap.delta_1_i:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 88: penumbra.core.component.dex.v1alpha1.EventSwap.delta_2_i:type_name -> penumbra.core.num.v1alpha1.Amount
	67,  // 89: penumbra.core.component.dex.v1alpha1.EventSwap.swap_commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	13,  // 90: penumbra.core.component.dex.v1alpha1.EventSwapClaim.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	67,  // 91: penumbra.core.component.dex.v1alpha1.EventSwapClaim.output_1_commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	67,  // 92: penumbra.core.component.dex.v1alpha1.EventSwapClaim.output_2_commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	65,  // 93: penumbra.core.component.dex.v1alpha1.EventSwapClaim.nullifier:type_name -> penumbra.core.component.sct.v1alpha1.Nullifier
	20,  // 94: penumbra.core.component.dex.v1alpha1.EventPositionOpen.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	13,  // 95: penumbra.core.component.dex.v1alpha1.EventPositionOpen.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	68,  // 96: penumbra.core.component.dex.v1alpha1.EventPositionOpen.reserves_1:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 97: penumbra.core.component.dex.v1alpha1.EventPositionOpen.reserves_2:type_name -> penumbra.core.num.v1alpha1.Amount
	20,  // 98: penumbra.core.component.dex.v1alpha1.EventPositionClose.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	20,  // 99: penumbra.core.component.dex.v1alpha1.EventPositionWithdraw.position_id:type_name -> penumbra.core.component.dex.v1alpha1.PositionId
	13,  // 100: penumbra.core.component.dex.v1alpha1.EventPositionWithdraw.trading_pair:type_name -> penumbra.core.component.dex.v1alpha1.TradingPair
	68,  // 101: penumbra.core.component.dex.v1alpha1.EventPositionWithdraw.reserves_1:type_name -> penumbra.core.num.v1alpha1.Amount
	68,  // 102: penumbra.core.component.dex.v1alpha1.EventPositionWithdraw.reserves_2:type_name -> penumbra.core.num.v1alpha1.Amount
	3,   // 103: penumbra.core.component.dex.v1alpha1.SwapView.Visible.swap:type_name -> penumbra.core.component.dex.v1alpha1.Swap
	8,   // 104: penumbra.core.component.dex.v1alpha1.SwapView.Visible.swap_plaintext:type_name -> penumbra.core.component.dex.v1alpha1.SwapPlaintext
	3,   // 105: penumbra.core.component.dex.v1alpha1.SwapView.Opaque.swap:type_name -> penumbra.core.component.dex.v1alpha1.Swap
	4,   // 106: penumbra.core.component.dex.v1alpha1.SwapClaimView.Visible.swap_claim:type_name -> penumbra.core.component.dex.v1alpha1.SwapClaim
	73,  // 107: penumbra.core.component.dex.v1alpha1.SwapClaimView.Visible.output_1:type_name -> penumbra.core.component.shielded_pool.v1alpha1.NoteView
	73,  // 108: penumbra.core.component.dex.v1alpha1.SwapClaimView.Visible.output_2:type_name -> penumbra.core.component.shielded_pool.v1alpha1.NoteView
	4,   // 109: penumbra.core.component.dex.v1alpha1.SwapClaimView.Opaque.swap_claim:type_name -> penumbra.core.component.dex.v1alpha1.SwapClaim
	72,  // 110: penumbra.core.component.dex.v1alpha1.SwapExecution.Trace.value:type_name -> penumbra.core.asset.v1alpha1.Value
	64,  // 111: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing.default:type_name -> penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing.Default
	63,  // 112: penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing.single_hop:type_name -> penumbra.core.component.dex.v1alpha1.SimulateTradeRequest.Routing.SingleHop
	30,  // 113: penumbra.core.component.dex.v1alpha1.QueryService.BatchSwapOutputData:input_type -> penumbra.core.component.dex.v1alpha1.BatchSwapOutputDataRequest
	32,  // 114: penumbra.core.component.dex.v1alpha1.QueryService.SwapExecution:input_type -> penumbra.core.component.dex.v1alpha1.SwapExecutionRequest
	34,  // 115: penumbra.core.component.dex.v1alpha1.QueryService.ArbExecution:input_type -> penumbra.core.component.dex.v1alpha1.ArbExecutionRequest
	36,  // 116: penumbra.core.component.dex.v1alpha1.QueryService.SwapExecutions:input_type -> penumbra.core.component.dex.v1alpha1.SwapExecutionsRequest
	38,  // 117: penumbra.core.component.dex.v1alpha1.QueryService.ArbExecutions:input_type -> penumbra.core.component.dex.v1alpha1.ArbExecutionsRequest
	40,  // 118: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositions:input_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionsRequest
	42,  // 119: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositionById:input_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionByIdRequest
	44,  // 120: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositionsById:input_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionsByIdRequest
	46,  // 121: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositionsByPrice:input_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionsByPriceRequest
	48,  // 122: penumbra.core.component.dex.v1alpha1.QueryService.Spread:input_type -> penumbra.core.component.dex.v1alpha1.SpreadRequest
	50,  // 123: penumbra.core.component.dex.v1alpha1.SimulationService.SimulateTrade:input_type -> penumbra.core.component.dex.v1alpha1.SimulateTradeRequest
	31,  // 124: penumbra.core.component.dex.v1alpha1.QueryService.BatchSwapOutputData:output_type -> penumbra.core.component.dex.v1alpha1.BatchSwapOutputDataResponse
	33,  // 125: penumbra.core.component.dex.v1alpha1.QueryService.SwapExecution:output_type -> penumbra.core.component.dex.v1alpha1.SwapExecutionResponse
	35,  // 126: penumbra.core.component.dex.v1alpha1.QueryService.ArbExecution:output_type -> penumbra.core.component.dex.v1alpha1.ArbExecutionResponse
	37,  // 127: penumbra.core.component.dex.v1alpha1.QueryService.SwapExecutions:output_type -> penumbra.core.component.dex.v1alpha1.SwapExecutionsResponse
	39,  // 128: penumbra.core.component.dex.v1alpha1.QueryService.ArbExecutions:output_type -> penumbra.core.component.dex.v1alpha1.ArbExecutionsResponse
	41,  // 129: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositions:output_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionsResponse
	43,  // 130: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositionById:output_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionByIdResponse
	45,  // 131: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositionsById:output_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionsByIdResponse
	47,  // 132: penumbra.core.component.dex.v1alpha1.QueryService.LiquidityPositionsByPrice:output_type -> penumbra.core.component.dex.v1alpha1.LiquidityPositionsByPriceResponse
	49,  // 133: penumbra.core.component.dex.v1alpha1.QueryService.Spread:output_type -> penumbra.core.component.dex.v1alpha1.SpreadResponse
	51,  // 134: penumbra.core.component.dex.v1alpha1.SimulationService.SimulateTrade:output_type -> penumbra.core.component.dex.v1alpha1.SimulateTradeResponse
	124, // [124:135] is the sub-list for method output_type
	113, // [113:124] is the sub-list for method input_type
	113, // [113:113] is the sub-list for extension type_name
	113, // [113:113] is the sub-list for extension extendee
	0,   // [0:113] is the sub-list for field type_name
}

func init() { file_penumbra_core_component_dex_v1alpha1_dex_proto_init() }
func file_penumbra_core_component_dex_v1alpha1_dex_proto_init() {
	if File_penumbra_core_component_dex_v1alpha1_dex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKSwapProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKSwapClaimProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPlaintext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectedTradingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSwapOutputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BareTradingFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reserves); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LpNft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRewardClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionWithdrawPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRewardClaimPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSwapOutputDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSwapOutputDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionsByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionsByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionsByPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiquidityPositionsByPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpreadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSwapClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPositionOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPositionClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPositionWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapExecution_Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeRequest_Routing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeRequest_Routing_SingleHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulateTradeRequest_Routing_Default); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SwapView_Visible_)(nil),
		(*SwapView_Opaque_)(nil),
	}
	file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SwapClaimView_Visible_)(nil),
		(*SwapClaimView_Opaque_)(nil),
	}
	file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*SimulateTradeRequest_Routing_Default_)(nil),
		(*SimulateTradeRequest_Routing_SingleHop_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_penumbra_core_component_dex_v1alpha1_dex_proto_goTypes,
		DependencyIndexes: file_penumbra_core_component_dex_v1alpha1_dex_proto_depIdxs,
		EnumInfos:         file_penumbra_core_component_dex_v1alpha1_dex_proto_enumTypes,
		MessageInfos:      file_penumbra_core_component_dex_v1alpha1_dex_proto_msgTypes,
	}.Build()
	File_penumbra_core_component_dex_v1alpha1_dex_proto = out.File
	file_penumbra_core_component_dex_v1alpha1_dex_proto_rawDesc = nil
	file_penumbra_core_component_dex_v1alpha1_dex_proto_goTypes = nil
	file_penumbra_core_component_dex_v1alpha1_dex_proto_depIdxs = nil
}
