// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: penumbra/crypto/tct/v1alpha1/tct.proto

package tctv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StateCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *StateCommitment) Reset() {
	*x = StateCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCommitment) ProtoMessage() {}

func (x *StateCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCommitment.ProtoReflect.Descriptor instead.
func (*StateCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescGZIP(), []int{0}
}

func (x *StateCommitment) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type MerkleRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *MerkleRoot) Reset() {
	*x = MerkleRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleRoot) ProtoMessage() {}

func (x *MerkleRoot) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleRoot.ProtoReflect.Descriptor instead.
func (*MerkleRoot) Descriptor() ([]byte, []int) {
	return file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescGZIP(), []int{1}
}

func (x *MerkleRoot) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// An authentication path from a state commitment to the root of the state commitment tree.
type StateCommitmentProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteCommitment *StateCommitment   `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	Position       uint64             `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	AuthPath       []*MerklePathChunk `protobuf:"bytes,3,rep,name=auth_path,json=authPath,proto3" json:"auth_path,omitempty"` // always length 24
}

func (x *StateCommitmentProof) Reset() {
	*x = StateCommitmentProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCommitmentProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCommitmentProof) ProtoMessage() {}

func (x *StateCommitmentProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCommitmentProof.ProtoReflect.Descriptor instead.
func (*StateCommitmentProof) Descriptor() ([]byte, []int) {
	return file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescGZIP(), []int{2}
}

func (x *StateCommitmentProof) GetNoteCommitment() *StateCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *StateCommitmentProof) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *StateCommitmentProof) GetAuthPath() []*MerklePathChunk {
	if x != nil {
		return x.AuthPath
	}
	return nil
}

// A set of 3 sibling hashes in the auth path for some note commitment.
type MerklePathChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sibling_1 []byte `protobuf:"bytes,1,opt,name=sibling_1,json=sibling1,proto3" json:"sibling_1,omitempty"`
	Sibling_2 []byte `protobuf:"bytes,2,opt,name=sibling_2,json=sibling2,proto3" json:"sibling_2,omitempty"`
	Sibling_3 []byte `protobuf:"bytes,3,opt,name=sibling_3,json=sibling3,proto3" json:"sibling_3,omitempty"`
}

func (x *MerklePathChunk) Reset() {
	*x = MerklePathChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathChunk) ProtoMessage() {}

func (x *MerklePathChunk) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathChunk.ProtoReflect.Descriptor instead.
func (*MerklePathChunk) Descriptor() ([]byte, []int) {
	return file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescGZIP(), []int{3}
}

func (x *MerklePathChunk) GetSibling_1() []byte {
	if x != nil {
		return x.Sibling_1
	}
	return nil
}

func (x *MerklePathChunk) GetSibling_2() []byte {
	if x != nil {
		return x.Sibling_2
	}
	return nil
}

func (x *MerklePathChunk) GetSibling_3() []byte {
	if x != nil {
		return x.Sibling_3
	}
	return nil
}

var File_penumbra_crypto_tct_v1alpha1_tct_proto protoreflect.FileDescriptor

var file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2f, 0x74, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x22, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x56, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x22, 0x68, 0x0a, 0x0f,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x33, 0x42, 0x98, 0x02, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x54, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e,
	0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x74, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x74, 0x63, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xa2, 0x02, 0x03, 0x50, 0x43, 0x54, 0xaa, 0x02, 0x1c, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x54, 0x63, 0x74, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1c, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x5c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x54, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x28, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x54, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1f, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x3a, 0x3a, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x3a, 0x3a, 0x54, 0x63, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescOnce sync.Once
	file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescData = file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDesc
)

func file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescGZIP() []byte {
	file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescOnce.Do(func() {
		file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescData)
	})
	return file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDescData
}

var file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_penumbra_crypto_tct_v1alpha1_tct_proto_goTypes = []interface{}{
	(*StateCommitment)(nil),      // 0: penumbra.crypto.tct.v1alpha1.StateCommitment
	(*MerkleRoot)(nil),           // 1: penumbra.crypto.tct.v1alpha1.MerkleRoot
	(*StateCommitmentProof)(nil), // 2: penumbra.crypto.tct.v1alpha1.StateCommitmentProof
	(*MerklePathChunk)(nil),      // 3: penumbra.crypto.tct.v1alpha1.MerklePathChunk
}
var file_penumbra_crypto_tct_v1alpha1_tct_proto_depIdxs = []int32{
	0, // 0: penumbra.crypto.tct.v1alpha1.StateCommitmentProof.note_commitment:type_name -> penumbra.crypto.tct.v1alpha1.StateCommitment
	3, // 1: penumbra.crypto.tct.v1alpha1.StateCommitmentProof.auth_path:type_name -> penumbra.crypto.tct.v1alpha1.MerklePathChunk
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_penumbra_crypto_tct_v1alpha1_tct_proto_init() }
func file_penumbra_crypto_tct_v1alpha1_tct_proto_init() {
	if File_penumbra_crypto_tct_v1alpha1_tct_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCommitmentProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePathChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_penumbra_crypto_tct_v1alpha1_tct_proto_goTypes,
		DependencyIndexes: file_penumbra_crypto_tct_v1alpha1_tct_proto_depIdxs,
		MessageInfos:      file_penumbra_crypto_tct_v1alpha1_tct_proto_msgTypes,
	}.Build()
	File_penumbra_crypto_tct_v1alpha1_tct_proto = out.File
	file_penumbra_crypto_tct_v1alpha1_tct_proto_rawDesc = nil
	file_penumbra_crypto_tct_v1alpha1_tct_proto_goTypes = nil
	file_penumbra_crypto_tct_v1alpha1_tct_proto_depIdxs = nil
}
