syntax = "proto3";
package penumbra.core.app.v1alpha1;

import "penumbra/core/component/chain/v1alpha1/chain.proto";
import "penumbra/core/component/community_pool/v1alpha1/community_pool.proto";
import "penumbra/core/component/distributions/v1alpha1/distributions.proto";
import "penumbra/core/component/fee/v1alpha1/fee.proto";
import "penumbra/core/component/governance/v1alpha1/governance.proto";
import "penumbra/core/component/ibc/v1alpha1/ibc.proto";
import "penumbra/core/component/shielded_pool/v1alpha1/shielded_pool.proto";
import "penumbra/core/component/stake/v1alpha1/stake.proto";
import "penumbra/core/transaction/v1alpha1/transaction.proto";

// Query operations for the overall Penumbra application.
service QueryService {
  // Gets the app parameters.
  rpc AppParameters(AppParametersRequest) returns (AppParametersResponse);
  // Returns the CometBFT transactions that occurred during a given block.
  rpc TransactionsByHeight(TransactionsByHeightRequest) returns (TransactionsByHeightResponse);
}

// Requests the list of all transactions that occurred within a given block.
message TransactionsByHeightRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The block height to retrieve.
  uint64 block_height = 2;
}

// A transaction that appeared within a given block.
message TransactionsByHeightResponse {
  // The transactions.
  repeated core.transaction.v1alpha1.Transaction transactions = 1;
  // The block height.
  uint64 block_height = 2;
}

message AppParameters {
  // Chain module parameters.
  core.component.chain.v1alpha1.ChainParameters chain_params = 1;
  // Community Pool module parameters.
  core.component.community_pool.v1alpha1.CommunityPoolParameters community_pool_params = 2;
  // Governance module parameters.
  core.component.governance.v1alpha1.GovernanceParameters governance_params = 3;
  // IBC module parameters.
  core.component.ibc.v1alpha1.IbcParameters ibc_params = 4;
  // Stake module parameters.
  core.component.stake.v1alpha1.StakeParameters stake_params = 5;
  // Fee module parameters.
  core.component.fee.v1alpha1.FeeParameters fee_params = 6;
  // Distributions module parameters.
  core.component.distributions.v1alpha1.DistributionsParameters distributions_params = 7;
}

// Requests the global configuration data for the app.
message AppParametersRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

message AppParametersResponse {
  AppParameters app_parameters = 1;
}

message GenesisAppState {
  oneof genesis_app_state {
    GenesisContent genesis_content = 1;
    bytes genesis_checkpoint = 2;
  }
}

message GenesisContent {
  // Stake module genesis state.
  core.component.stake.v1alpha1.GenesisContent stake_content = 1;
  // Shielded pool module genesis state.
  core.component.shielded_pool.v1alpha1.GenesisContent shielded_pool_content = 2;
  // Governance module genesis state.
  core.component.governance.v1alpha1.GenesisContent governance_content = 3;
  // IBC module genesis state.
  core.component.ibc.v1alpha1.GenesisContent ibc_content = 4;
  // Chain module genesis state.
  core.component.chain.v1alpha1.GenesisContent chain_content = 5;
  // Community Pool module genesis state.
  core.component.community_pool.v1alpha1.GenesisContent community_pool_content = 6;
  // Fee module genesis state.
  core.component.fee.v1alpha1.GenesisContent fee_content = 7;
  // Distributions module genesis state.
  core.component.distributions.v1alpha1.GenesisContent distributions_content = 8;
}
